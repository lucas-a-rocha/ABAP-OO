CLASS zclaa_transf_imobilizado DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES:
      BEGIN OF ty_lista_imob.
        INCLUDE TYPE ztaa_001.
      TYPES:
        anlkl       TYPE anla-anlkl,
        ktext       TYPE zeaa_descloc_origem,
        ktextd      TYPE zeaa_descloc_destino,
        txt50       TYPE txa50_anlt,
        celltab     TYPE lvc_t_styl,
        txt_itm     TYPE icon_d,
        txt_sol     TYPE icon_d,
        txt_itm_id  TYPE ztaa_003-id_linha,
        stsitm_ddk  TYPE zeaa_stsol_desc,
        stshdr_ddk  TYPE zeaa_stsol_desc,
        ordtx       TYPE t087t-ordtx,
        dcr_transtp TYPE zeaa_stsol_desc,
      END OF ty_lista_imob .
    TYPES:
      BEGIN OF ty_textos.
        INCLUDE TYPE ztaa_003.
      TYPES:
        txt_itm_id TYPE ztaa_003-id_linha,
      END OF ty_textos .
    TYPES:
      BEGIN OF ty_anla,
        anln1 TYPE anla-anln1,
        anln2 TYPE anla-anln2,
        anlkl TYPE anla-anlkl,
        invnr TYPE anla-invnr,
        ord41 TYPE anla-ord41,
        bukrs TYPE anlz-bukrs,
        kostl TYPE anlz-kostl,
        werks TYPE anlz-werks,
        stort TYPE anlz-stort,
        txt50 TYPE anla-txt50,
        deakt TYPE anla-deakt,
        aktiv TYPE anla-aktiv,
      END OF ty_anla .
    TYPES:
      BEGIN OF ty_contas,
        debito  TYPE bapiacgl09-gl_account,
        credito TYPE bapiacgl09-gl_account,
        tipo    TYPE char1, " O = Origem e D = Destino
      END OF ty_contas .
    TYPES:
      tt_contas TYPE STANDARD TABLE OF ty_contas WITH EMPTY KEY .
    TYPES:
      tt_anla TYPE STANDARD TABLE OF ty_anla WITH EMPTY KEY .
    TYPES:
      tt_lista_imob TYPE STANDARD TABLE OF ty_lista_imob WITH EMPTY KEY .
    TYPES:
      tr_solic TYPE RANGE OF ztaa_001-solicitacao .
    TYPES:
      tr_kostl TYPE RANGE OF ztaa_001-kostl .
    TYPES:
      tr_werks TYPE RANGE OF ztaa_001-werks .
    TYPES:
      tr_bukrs    TYPE RANGE OF ztaa_001-bukrs .
    TYPES:
      tr_pernr    TYPE RANGE OF ztaa_001-pernr .
    TYPES:
      tr_aprov    TYPE RANGE OF ztaa_001-aprov .
    TYPES:
      tr_transtp  TYPE RANGE OF ztaa_001-transtp .
    TYPES:
      tr_anln1    TYPE RANGE OF ztaa_001-anln1 .
    TYPES:
      tr_anln2    TYPE RANGE OF ztaa_001-anln2 .
    TYPES:
      tr_solori   TYPE RANGE OF ztaa_001-solori .
    TYPES:
      tr_stort    TYPE RANGE OF ztaa_001-stort .
    TYPES:
      tr_bzdat    TYPE RANGE OF ztaa_001-bzdat .
    TYPES:
      tr_stshdr   TYPE RANGE OF ztaa_001-stshdr .
    TYPES:
      tr_crdate   TYPE RANGE OF ztaa_001-crdate .
    TYPES:
      tt_textos TYPE STANDARD TABLE OF ty_textos .                "ztaa_003.
    TYPES:
*    TYPES:
*      tt_ztaa_001   TYPE STANDARD TABLE OF ztaa_001 WITH EMPTY KEY .
      tt_dynp  TYPE STANDARD TABLE OF dynpread WITH EMPTY KEY .
    TYPES:
      tt_dfies TYPE STANDARD TABLE OF dfies WITH EMPTY KEY .

    CONSTANTS c_criar TYPE sy-ucomm VALUE 'CREA' ##NO_TEXT.
    CONSTANTS c_exibir TYPE sy-ucomm VALUE 'SHOW' ##NO_TEXT.
    CONSTANTS c_aceitar TYPE sy-ucomm VALUE 'ACEIT' ##NO_TEXT.
    CONSTANTS c_recusar TYPE sy-ucomm VALUE 'RECS' ##NO_TEXT.
    CONSTANTS c_aprovar TYPE sy-ucomm VALUE 'APRV' ##NO_TEXT.
    CONSTANTS c_save_all TYPE sy-ucomm VALUE 'SAVEALL' ##NO_TEXT.
    CONSTANTS c_sol_inicial TYPE ztaa_001-solicitacao VALUE 'INTERN-00001' ##NO_TEXT.
    CONSTANTS c_obj_ballog TYPE bal_s_log-object VALUE 'ZLOG' ##NO_TEXT.
    CONSTANTS c_subobj_ballog TYPE bal_s_log-subobject VALUE 'ZAA_004' ##NO_TEXT.
    CONSTANTS c_extnumber_ballog TYPE bal_s_log-extnumber VALUE 'TransferÃªncia de Imobilizados' ##NO_TEXT.
    CONSTANTS c_estrutura_ballog TYPE string VALUE 'ZSAA_005' ##NO_TEXT.

    METHODS constructor
      IMPORTING
        !iv_bukrs  TYPE ztaa_001-bukrs OPTIONAL
        !ir_werks  TYPE tr_werks OPTIONAL
        !ir_kostl  TYPE tr_kostl OPTIONAL
        !iv_acao   TYPE sy-ucomm OPTIONAL
        !ir_solic  TYPE tr_solic OPTIONAL
        !iv_layout TYPE disvariant-variant OPTIONAL .
    METHODS get_acao
      RETURNING
        VALUE(rv_acao) TYPE sy-ucomm .
    METHODS get_desc_transtp
      IMPORTING
        !iv_transtp    TYPE ztaa_001-transtp
      RETURNING
        VALUE(rv_desc) TYPE dynpread-fieldvalue .
    METHODS get_desc_werks
      IMPORTING
        !iv_werks      TYPE ztaa_001-werks
      RETURNING
        VALUE(rv_desc) TYPE dynpread-fieldvalue .
    METHODS get_desc_kostl
      IMPORTING
        !iv_kostl      TYPE ztaa_001-kostl
      RETURNING
        VALUE(rv_desc) TYPE dynpread-fieldvalue .
    METHODS get_desc_stort
      IMPORTING
        !iv_stort      TYPE ztaa_001-stort
        !iv_werks      TYPE ztaa_001-werks
      RETURNING
        VALUE(rv_desc) TYPE dynpread-fieldvalue .
    METHODS get_desc_pernr
      IMPORTING
        !iv_pernr      TYPE ztaa_001-pernr
      RETURNING
        VALUE(rv_desc) TYPE dynpread-fieldvalue .
    METHODS get_sol_num
      RETURNING
        VALUE(rv_solic) TYPE ztaa_001-solicitacao .
    METHODS get_list_imobilizados
      RETURNING
        VALUE(rt_lista_imob) TYPE zctaa_ctrl_transf_bens .
    METHODS set_dados_destino
      IMPORTING
        !iv_werks    TYPE ztaa_001-werksd
        !iv_kostl    TYPE ztaa_001-kostld
        !iv_stort    TYPE ztaa_001-stortd OPTIONAL
        !iv_transtp  TYPE ztaa_001-transtp OPTIONAL
        !iv_resp_rec TYPE ztaa_001-pernr OPTIONAL .
    METHODS apresentar_rel_ateste
      RAISING
        cx_idm_error .
    METHODS apresentar_rel_aprov
      RAISING
        cx_idm_error .
    METHODS apresentar_rel_exibicao
      RAISING
        cx_idm_error .
    METHODS iniciar_rotina_emails_auto
      IMPORTING
        !iv_dias TYPE num4
      RAISING
        cx_idm_error .
    METHODS executar_rel_completo
      IMPORTING
        !ir_solic  TYPE tr_solic OPTIONAL
        !ir_bukrs  TYPE tr_bukrs OPTIONAL
        !ir_pernr  TYPE tr_pernr OPTIONAL
        !ir_tptra  TYPE tr_transtp OPTIONAL
        !ir_anln1  TYPE tr_anln1 OPTIONAL
        !ir_anln2  TYPE tr_anln2 OPTIONAL
        !ir_solori TYPE tr_solori OPTIONAL
        !ir_kostl  TYPE tr_kostl OPTIONAL
        !ir_werks  TYPE tr_werks OPTIONAL
        !ir_stort  TYPE tr_stort OPTIONAL
        !ir_kostld TYPE tr_kostl OPTIONAL
        !ir_werksd TYPE tr_werks OPTIONAL
        !ir_stortd TYPE tr_stort OPTIONAL
        !ir_bzdat  TYPE tr_bzdat OPTIONAL
        !ir_stshdr TYPE tr_stshdr OPTIONAL
        !ir_crdate TYPE tr_crdate OPTIONAL
      RAISING
        cx_idm_error .
    CLASS-METHODS buscar_informacoes_campo
      IMPORTING
        !iv_tabname     TYPE ddobjname
        !iv_fieldname   TYPE dfies-fieldname
      RETURNING
        VALUE(rv_dfies) TYPE dfies .
    CLASS-METHODS buscar_informacoes_estr
      IMPORTING
        !iv_estrutura      TYPE dd02l-tabname
      RETURNING
        VALUE(rt_fieldcat) TYPE lvc_t_fcat .
    CLASS-METHODS buscar_email_from_uname
      IMPORTING
        !iv_uname       TYPE sy-uname
      RETURNING
        VALUE(rv_email) TYPE adr6-smtp_addr .
    METHODS check_alv_oo
      RETURNING
        VALUE(rv_ativo) TYPE abap_bool .
    METHODS confirmar_envio
      IMPORTING
        !iv_title           TYPE string
        !iv_question        TYPE string
      RETURNING
        VALUE(rv_confirmar) TYPE abap_bool
      RAISING
        cx_idm_error .
    METHODS criar_alv_aceite_aprov .
    METHODS criar_alv_transferencia .
    METHODS criar_alv_exibicao
      IMPORTING
        !iv_read_only TYPE abap_bool OPTIONAL .
    METHODS enviar_aceite
      RAISING
        cx_idm_error .
    METHODS enviar_aprovacao
      RAISING
        cx_idm_error .
    METHODS enviar_recusa
      RAISING
        cx_idm_error .
    METHODS enviar_aprov_recus_individual
      RAISING
        cx_idm_error .
    METHODS enviar_para_aprovacao_fiscal
      RAISING
        cx_idm_error .
    METHODS gerar_estrutura_tela
      RETURNING
        VALUE(rs_ztaa_001) TYPE ztaa_001 .
    METHODS handle_user_command
        FOR EVENT user_command OF cl_gui_alv_grid
      IMPORTING
        !e_ucomm
        !sender .
    METHODS handle_data_changed
        FOR EVENT data_changed OF cl_gui_alv_grid
      IMPORTING
        !er_data_changed
        !e_ucomm
        !e_onf4
        !e_onf4_before
        !e_onf4_after .
    METHODS handle_top_of_page
        FOR EVENT top_of_page OF cl_gui_alv_grid
      IMPORTING
        !e_dyndoc_id
        !table_index .
    METHODS handle_print_top_of_page
        FOR EVENT print_top_of_page OF cl_gui_alv_grid
      IMPORTING
        !table_index .
    METHODS handle_button_click
        FOR EVENT button_click OF cl_gui_alv_grid
      IMPORTING
        !es_col_id
        !es_row_no .
    METHODS handle_onf4
        FOR EVENT onf4 OF cl_gui_alv_grid
      IMPORTING
        !e_fieldname
        !e_fieldvalue
        !es_row_no
        !er_event_data
        !et_bad_cells
        !e_display .
    METHODS inserir_texto_sol
      IMPORTING
        !iv_linha TYPE i OPTIONAL .
    METHODS limpar_cache_alv .
    METHODS refresh_alv_oo .
  PROTECTED SECTION.
  PRIVATE SECTION.

    DATA vg_bukrs TYPE ztaa_001-bukrs .
*    DATA vg_werks_o TYPE ztaa_001-werks .
    DATA rg_werks_o TYPE tr_werks .
*    DATA vg_kostl_o TYPE ztaa_001-kostl .
    DATA rg_kostl_o TYPE tr_kostl .
    DATA vg_solic TYPE ztaa_001-solicitacao .
    DATA vg_acao TYPE sy-ucomm .
    DATA vg_werks_d TYPE ztaa_001-werksd .
    DATA vg_kostl_d TYPE ztaa_001-kostld .
*    DATA rg_kostl_d TYPE tr_kostl .
    DATA vg_stort_d TYPE ztaa_001-stortd .
    DATA vg_transtp TYPE ztaa_001-transtp .
    DATA vg_item_base TYPE ztaa_001-item .
    DATA vg_resp_rec TYPE ztaa_001-pernr .
    DATA vg_txt_itm_id TYPE ztaa_003-id_linha .
    DATA vg_layout TYPE disvariant-variant .
    DATA rg_solic TYPE tr_solic .
    DATA tg_lista_imob TYPE tt_lista_imob .
    DATA tg_texto_sol TYPE tt_textos .
    DATA tg_textos_imob TYPE tt_textos .
    DATA og_container TYPE REF TO cl_gui_container .
    DATA og_header_container TYPE REF TO cl_gui_container .
    DATA og_body_container TYPE REF TO cl_gui_container .
    DATA og_ref_doc TYPE REF TO cl_dd_document .
    DATA og_alv_oo TYPE REF TO cl_gui_alv_grid .
    DATA og_bal_log TYPE REF TO zcl_bal_log .

    METHODS modified_rows
      CHANGING
        !cr_data_changed TYPE REF TO cl_alv_changed_data_protocol .
    METHODS inserted_rows
      CHANGING
        !cr_data_changed TYPE REF TO cl_alv_changed_data_protocol .
    METHODS deleted_rows
      CHANGING
        !cr_data_changed TYPE REF TO cl_alv_changed_data_protocol .
    METHODS aceitar_transferencia
      IMPORTING
        !it_imobilizados TYPE tt_lista_imob
      RAISING
        cx_idm_error .
    METHODS ajustar_status_header
      IMPORTING
        !it_imobilizados TYPE tt_lista_imob
        !iv_status       TYPE ztaa_001-stsitm .
    METHODS aprovar_transferencia
      IMPORTING
        !it_imobilizados TYPE tt_lista_imob
      RAISING
        cx_idm_error .
    METHODS recusar_transferencia
      IMPORTING
        !it_imobilizados TYPE tt_lista_imob
      RAISING
        cx_idm_error .
    METHODS buscar_texto_dominio
      IMPORTING
        !iv_domain_name TYPE dd01l-domname
        !iv_value       TYPE any
      EXPORTING
        !ev_text        TYPE any .
    METHODS buscar_dados_imobilizado
      IMPORTING
        !iv_anln1      TYPE ztaa_001-anln1 OPTIONAL
        !iv_anln2      TYPE ztaa_001-anln2 OPTIONAL
        !it_lista_imob TYPE tt_lista_imob OPTIONAL
      EXPORTING
        !es_anla       TYPE ty_anla
        !et_anla       TYPE tt_anla
      RAISING
        cx_idm_error .
    METHODS buscar_lista_imob
      RAISING
        cx_idm_error .
    METHODS buscar_lista_imob_pendentes
      IMPORTING
        !iv_status TYPE ztaa_001-stshdr
      RAISING
        cx_idm_error .
    METHODS buscar_pernr_uname
      IMPORTING
        !iv_uname       TYPE sy-uname
      RETURNING
        VALUE(rv_pernr) TYPE pa0105-pernr .
    METHODS buscar_email
      IMPORTING
        !iv_pernr        TYPE pernr-pernr OPTIONAL
        !iv_uname        TYPE sy-uname OPTIONAL
      RETURNING
        VALUE(rv_e_mail) TYPE ad_smtpadr
      RAISING
        cx_idm_error .
    METHODS criar_dropdown_statusitem .
    METHODS enviar_email_aprovacao
      IMPORTING
        !iv_numsol TYPE ztaa_001-solicitacao
        !iv_kostl  TYPE ztaa_001-kostld
      RAISING
        cx_idm_error .
    METHODS enviar_email_fiscal
      IMPORTING
        !iv_solic   TYPE ztaa_001-solicitacao
        !iv_kostl_d TYPE ztaa_001-kostld
      RAISING
        cx_idm_error .
    METHODS enviar_email_recusa
      IMPORTING
        !is_imobilizado TYPE ztaa_001
      RAISING
        cx_idm_error .
    METHODS enviar_email_pendencias
      IMPORTING
        !iv_numsol  TYPE ztaa_001-solicitacao
        !iv_kostl_d TYPE ztaa_001-kostld
        !iv_dias    TYPE num4
        !iv_solori  TYPE ztaa_001-solori
      RAISING
        cx_idm_error .
    METHODS excluir_funcionalidades
      IMPORTING
        !iv_bloq            TYPE abap_bool OPTIONAL
      RETURNING
        VALUE(rt_functions) TYPE ui_functions .
    METHODS executar_transferencia
      IMPORTING
        !is_imobilizado TYPE ty_lista_imob
        !iv_test        TYPE abap_bool OPTIONAL
      RAISING
        cx_idm_error .
    METHODS executar_transferencia_interna
      IMPORTING
        !is_imobilizado TYPE ty_lista_imob
        !iv_test        TYPE abap_bool OPTIONAL
      RAISING
        cx_idm_error .
    METHODS executar_lancamento_contabil
      IMPORTING
        !iv_check       TYPE abap_bool OPTIONAL
        !is_imobilizado TYPE ty_lista_imob
        !it_contas      TYPE tt_contas
      RAISING
        cx_idm_error .
    METHODS executar_evento_591408
      IMPORTING
        !iv_check        TYPE abap_bool OPTIONAL
        !it_imobilizados TYPE tt_lista_imob OPTIONAL
        !is_imobilizado  TYPE ty_lista_imob OPTIONAL
      RAISING
        cx_idm_error .
    METHODS executar_evento_591409
      IMPORTING
        !iv_check        TYPE abap_bool OPTIONAL
        !it_imobilizados TYPE tt_lista_imob
      RAISING
        cx_idm_error .
    METHODS inserir_texto_linha
      IMPORTING
        !iv_linha TYPE i .
    METHODS iniciar_bal_log
      RAISING
        cx_idm_error .
    METHODS visualizar_texto_linha
      IMPORTING
        !iv_linha TYPE i
        !iv_col   TYPE lvc_fname
      RAISING
        cx_idm_error .
    METHODS montar_imobilizado_transf
      IMPORTING
        !iv_anln1      TYPE ztaa_001-anln1
        !iv_anln2      TYPE ztaa_001-anln2
      EXPORTING
        !es_lista_imob TYPE ty_lista_imob
      RAISING
        cx_idm_error .
    METHODS montar_fieldcat_9001
      RETURNING
        VALUE(rt_fieldcat) TYPE lvc_t_fcat .
    METHODS montar_fieldcat_9002
      RETURNING
        VALUE(rt_fieldcat) TYPE lvc_t_fcat .
    METHODS montar_fieldcat_alv_aceite
      RETURNING
        VALUE(rt_fieldcat) TYPE lvc_t_fcat .
    METHODS montar_campos_editaveis
      RETURNING
        VALUE(rt_celltab) TYPE lvc_t_styl .
    METHODS montar_chave_solicitacao
      IMPORTING
        !iv_werks             TYPE ztaa_001-werks
      RETURNING
        VALUE(rv_solicitacao) TYPE ztaa_001-solicitacao
      RAISING
        cx_idm_error .
    METHODS serach_help_itm_aprova
      CHANGING
        !er_event_data TYPE REF TO cl_alv_event_data
        !es_row_no     TYPE lvc_s_roid .
    METHODS serach_help_anln1
      CHANGING
        !er_event_data TYPE REF TO cl_alv_event_data
        !es_row_no     TYPE lvc_s_roid .
    METHODS verificar_dados
      RAISING
        cx_idm_error .
    METHODS verificar_acesso_centro
      RAISING
        cx_idm_error .
ENDCLASS.



CLASS zclaa_transf_imobilizado IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->ACEITAR_TRANSFERENCIA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_IMOBILIZADOS                TYPE        TT_LISTA_IMOB
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD aceitar_transferencia.
    DATA:
      sl_msg             TYPE bapiret2,
      tl_imbo_transferir TYPE me->tt_lista_imob,
      tl_texto_transf    TYPE STANDARD TABLE OF ztaa_003,
      tl_ztaa_003        TYPE STANDARD TABLE OF ztaa_003,
      vl_solicitacao     TYPE ztaa_001-solicitacao,
      sl_log_erro        TYPE zsaa_005,
      vl_erro            TYPE abap_bool.

    tl_imbo_transferir[] = it_imobilizados[].

    IF tl_imbo_transferir IS NOT INITIAL.

      LOOP AT tl_imbo_transferir ASSIGNING FIELD-SYMBOL(<fs_lista_imob>).
        IF <fs_lista_imob>-stortd IS INITIAL.
          sl_msg-type = 'E'.
          sl_msg-id = 'ZAA'.
          sl_msg-number = 014. " Campo &1 nÃ£o informado no imobilizado &2/&3.
          sl_msg-message_v1 = 'LocalizaÃ§Ã£o de Destino'.
          sl_msg-message_v2 = <fs_lista_imob>-anln1.
          sl_msg-message_v3 = <fs_lista_imob>-anln2.

          RAISE EXCEPTION TYPE cx_idm_error
            EXPORTING
              message = sl_msg.
        ENDIF.

        IF <fs_lista_imob>-pernr IS INITIAL.
          sl_msg-type = 'E'.
          sl_msg-id = 'ZAA'.
          sl_msg-number = 014. " Campo &1 nÃ£o informado no imobilizado &2/&3.
          sl_msg-message_v1 = 'ResponsÃ¡vel'.
          sl_msg-message_v2 = <fs_lista_imob>-anln1.
          sl_msg-message_v3 = <fs_lista_imob>-anln2.

          RAISE EXCEPTION TYPE cx_idm_error
            EXPORTING
              message = sl_msg.
        ENDIF.
      ENDLOOP.

      CLEAR vl_solicitacao.
      LOOP AT tl_imbo_transferir ASSIGNING <fs_lista_imob>.
        CLEAR sl_log_erro.
        TRY .

**********************************************************************
*           " Executa a criaÃ§Ã£o em modo de teste.
**********************************************************************
            IF <fs_lista_imob>-transtp EQ '02'.
              me->executar_transferencia_interna( is_imobilizado = <fs_lista_imob> iv_test = abap_true ).
            ELSE.
              me->executar_transferencia( is_imobilizado = <fs_lista_imob> iv_test = abap_true ).
            ENDIF.

**********************************************************************
*           " Executa o evento em modo de teste.
**********************************************************************
            me->executar_evento_591408( is_imobilizado = <fs_lista_imob> iv_check = abap_true  ).

**********************************************************************
*           " Executa a criaÃ§Ã£o.
**********************************************************************
            IF <fs_lista_imob>-transtp EQ '02'.
              me->executar_transferencia_interna( is_imobilizado = <fs_lista_imob> ).
            ELSE.
              me->executar_transferencia( is_imobilizado = <fs_lista_imob> ).
            ENDIF.

**********************************************************************
*           " Executa o evento.
**********************************************************************
            me->executar_evento_591408( is_imobilizado = <fs_lista_imob> ).

            UPDATE ztaa_001
              SET stsitm  = '2' " Atestado
                  stortd  = <fs_lista_imob>-stortd
                  pernr   = <fs_lista_imob>-pernr
            WHERE bukrs          = <fs_lista_imob>-bukrs
              AND werks          = <fs_lista_imob>-werks
              AND gjahr          = <fs_lista_imob>-gjahr
              AND solicitacao    = <fs_lista_imob>-solicitacao
              AND item           = <fs_lista_imob>-item.

**********************************************************************
*       " Vincula o imobilizado ao texto criado de acordo com o numero da solicitaÃ§Ã£o
**********************************************************************
            FREE tl_texto_transf.
            tl_texto_transf = VALUE #( FOR wl_textos IN me->tg_textos_imob WHERE ( solicitacao = <fs_lista_imob>-solicitacao )
            (
              bukrs       = <fs_lista_imob>-bukrs
              werks       = <fs_lista_imob>-werks
              gjahr       = <fs_lista_imob>-gjahr
              solicitacao = <fs_lista_imob>-solicitacao
              item        = <fs_lista_imob>-item
              id_linha    = wl_textos-id_linha
              texto       = wl_textos-texto
             ) ).

            APPEND LINES OF tl_texto_transf TO tl_ztaa_003.

**********************************************************************
*       " Vincula o texto da solicitaÃ§Ã£o ao nÃºmero da solicitaÃ§Ã£o
**********************************************************************
            IF vl_solicitacao NE <fs_lista_imob>-solicitacao.
              FREE tl_texto_transf.
              tl_texto_transf = VALUE #( FOR wl_textos IN me->tg_texto_sol WHERE ( solicitacao = <fs_lista_imob>-solicitacao )
              (
                bukrs       = <fs_lista_imob>-bukrs
                werks       = <fs_lista_imob>-werks
                gjahr       = <fs_lista_imob>-gjahr
                solicitacao = <fs_lista_imob>-solicitacao
                id_linha    = wl_textos-id_linha
                texto       = wl_textos-texto
               ) ).

              APPEND LINES OF tl_texto_transf TO tl_ztaa_003.
            ENDIF.

*           " Os itens ajustados devem ser removidos do ALV.
*           " Isso garante que em caso de erro, nÃ£o irÃ¡ executar novamente nenhum registro.
            DELETE me->tg_lista_imob WHERE bukrs        = <fs_lista_imob>-bukrs
                                       AND werks        = <fs_lista_imob>-werks
                                       AND gjahr        = <fs_lista_imob>-gjahr
                                       AND solicitacao  = <fs_lista_imob>-solicitacao
                                       AND item         = <fs_lista_imob>-item       .

            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
          CATCH cx_idm_error INTO DATA(ol_idm_error).
            sl_log_erro = CORRESPONDING #( <fs_lista_imob> ).

            IF ol_idm_error->messages[] IS INITIAL.
              me->og_bal_log->add_msg_bapiret( is_bapiret = ol_idm_error->message dados_adicionais = sl_log_erro ).

            ELSE.
              LOOP AT ol_idm_error->messages ASSIGNING FIELD-SYMBOL(<fs_msg>).
                me->og_bal_log->add_msg_bapiret( is_bapiret = <fs_msg> dados_adicionais = sl_log_erro ).
              ENDLOOP.
            ENDIF.

            vl_erro = abap_true.

        ENDTRY.
      ENDLOOP.

**************************************************************************************
*     " Realiza o ajuste do status do cabeÃ§alho, de acordo com as modificaÃ§Ãµes.
**************************************************************************************
      me->ajustar_status_header( it_imobilizados = tl_imbo_transferir iv_status = '3' ).

    ENDIF.

    SORT tl_ztaa_003 BY bukrs werks gjahr solicitacao item id_linha.
    MODIFY ztaa_003 FROM TABLE tl_ztaa_003.

    IF vl_erro EQ abap_true.
      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = VALUE #( id = 'ZAA' number = 021 type = 'E' ). " Ocorreram erros durante a execuÃ§Ã£o. Visualize o Log.
    ENDIF.

*   " LÃ³gica alterada para admitir o tratamento apenas dos erros e armazenamento na ballog.
***********************************************************************
**     " Executa a criaÃ§Ã£o em modo de teste.
***********************************************************************
*      LOOP AT tl_imbo_transferir ASSIGNING <fs_lista_imob>.
*        me->executar_transferencia( is_imobilizado = <fs_lista_imob> iv_test = abap_true ).
*      ENDLOOP.
*
***********************************************************************
**     " Executa o evento em modo de teste.
***********************************************************************
*      me->executar_evento_591408( iv_check = abap_true it_imobilizados = tl_imbo_transferir ).
*
*      LOOP AT tl_imbo_transferir ASSIGNING <fs_lista_imob>.
***********************************************************************
**       " Executa a criaÃ§Ã£o.
***********************************************************************
*        me->executar_transferencia( is_imobilizado = <fs_lista_imob> ).
*      ENDLOOP.
*
*      CLEAR vl_solicitacao.
*      LOOP AT tl_imbo_transferir ASSIGNING <fs_lista_imob>.
*
*        UPDATE ztaa_001
*          SET stsitm = '2' " Atestado
*              stortd  = <fs_lista_imob>-stortd
*              pernr   = <fs_lista_imob>-pernr
*        WHERE bukrs          = <fs_lista_imob>-bukrs
*          AND werks          = <fs_lista_imob>-werks
*          AND gjahr          = <fs_lista_imob>-gjahr
*          AND solicitacao    = <fs_lista_imob>-solicitacao
*          AND item           = <fs_lista_imob>-item.
*
************************************************************************
***       " Executa a criaÃ§Ã£o.
************************************************************************
**        me->executar_transferencia( is_imobilizado = <fs_lista_imob> ).
*
***********************************************************************
**       " Vincula o imobilizado ao texto criado de acordo com o numero da solicitaÃ§Ã£o
***********************************************************************
*        FREE tl_texto_transf.
*        tl_texto_transf = VALUE #( FOR wl_textos IN me->tg_textos_imob WHERE ( solicitacao = <fs_lista_imob>-solicitacao )
*        (
*          bukrs       = <fs_lista_imob>-bukrs
*          werks       = <fs_lista_imob>-werks
*          gjahr       = <fs_lista_imob>-gjahr
*          solicitacao = <fs_lista_imob>-solicitacao
*          item        = <fs_lista_imob>-item
*          id_linha    = wl_textos-id_linha
*          texto       = wl_textos-texto
*         ) ).
*
*        APPEND LINES OF tl_texto_transf TO tl_ztaa_003.
*
***********************************************************************
**       " Vincula o texto da solicitaÃ§Ã£o ao nÃºmero da solicitaÃ§Ã£o
***********************************************************************
*        IF vl_solicitacao NE <fs_lista_imob>-solicitacao.
*          FREE tl_texto_transf.
*          tl_texto_transf = VALUE #( FOR wl_textos IN me->tg_texto_sol WHERE ( solicitacao = <fs_lista_imob>-solicitacao )
*          (
*            bukrs       = <fs_lista_imob>-bukrs
*            werks       = <fs_lista_imob>-werks
*            gjahr       = <fs_lista_imob>-gjahr
*            solicitacao = <fs_lista_imob>-solicitacao
*            id_linha    = wl_textos-id_linha
*            texto       = wl_textos-texto
*           ) ).
*
*          APPEND LINES OF tl_texto_transf TO tl_ztaa_003.
*        ENDIF.
*      ENDLOOP.
*
***************************************************************************************
**     " Realiza o ajuste do status do cabeÃ§alho, de acordo com as modificaÃ§Ãµes.
***************************************************************************************
*      me->ajustar_status_header( it_imobilizados = tl_imbo_transferir iv_status = '3' ).
*
***********************************************************************
**     " Executa o evento.
***********************************************************************
*      me->executar_evento_591408( iv_check = abap_false it_imobilizados = tl_imbo_transferir ).
*    ENDIF.
*
*    SORT tl_ztaa_003 BY bukrs werks gjahr solicitacao item id_linha.
*    MODIFY ztaa_003 FROM TABLE tl_ztaa_003.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->AJUSTAR_STATUS_HEADER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_IMOBILIZADOS                TYPE        TT_LISTA_IMOB
* | [--->] IV_STATUS                      TYPE        ZTAA_001-STSITM
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD ajustar_status_header.
*    " Status do Header.
*    1  Em analise fiscal
*    2  Aguardando aceite
*    3  ConcluÃ­do
*    4  Cancelado

*    " Status do Item.
*    1  Pendente
*    2  Atestado
*    3  Recusado
*    4  Cancelado

    DATA tl_solicitacoes TYPE me->tt_lista_imob.
    DATA tl_sol_st_change TYPE me->tt_lista_imob.

    tl_solicitacoes[] = it_imobilizados[].

    SORT tl_solicitacoes BY bukrs werks gjahr solicitacao.
    DELETE ADJACENT DUPLICATES FROM tl_solicitacoes COMPARING bukrs werks gjahr solicitacao.

    SELECT bukrs, werks, gjahr, solicitacao, stshdr, stsitm
      INTO TABLE @DATA(tl_sol_status)
      FROM ztaa_001
      FOR ALL ENTRIES IN @tl_solicitacoes
      WHERE bukrs          = @tl_solicitacoes-bukrs
        AND werks          = @tl_solicitacoes-werks
        AND gjahr          = @tl_solicitacoes-gjahr
        AND solicitacao    = @tl_solicitacoes-solicitacao.

    SORT tl_sol_status BY bukrs werks gjahr solicitacao stshdr stsitm.
    DELETE ADJACENT DUPLICATES FROM tl_sol_status COMPARING bukrs werks gjahr solicitacao stshdr stsitm.

*********************************************************************************************************
*   " 3 - Verifica se ainda existe algum item pendente. Caso nÃ£o exista, armazena como "3 - ConcluÃ­do".
*********************************************************************************************************
    IF iv_status EQ '3'. "3 - ConcluÃ­do"
      LOOP AT tl_solicitacoes ASSIGNING FIELD-SYMBOL(<fs_solicitacoes>).
        READ TABLE tl_sol_status TRANSPORTING NO FIELDS WITH KEY  bukrs       = <fs_solicitacoes>-bukrs
                                                                  werks       = <fs_solicitacoes>-werks
                                                                  gjahr       = <fs_solicitacoes>-gjahr
                                                                  solicitacao = <fs_solicitacoes>-solicitacao
                                                                  stsitm      = '1'. " Pendente
        IF sy-subrc EQ 0.
          CONTINUE.
        ENDIF.

        APPEND <fs_solicitacoes> TO tl_sol_st_change.
      ENDLOOP.
    ENDIF.

*********************************************************************************************************
*   " 4 - Verifica se algum item da solicitaÃ§Ã£o ainda nÃ£o foi recusado/cancelado.
*   " Quando todos estiverem sido recusados/cancelados, altera o status do header para "4 - Cancelado"
*********************************************************************************************************
    IF iv_status EQ '4'. "4 - Cancelado"
      LOOP AT tl_solicitacoes ASSIGNING <fs_solicitacoes>.
        READ TABLE tl_sol_status TRANSPORTING NO FIELDS WITH KEY  bukrs       = <fs_solicitacoes>-bukrs
                                                                  werks       = <fs_solicitacoes>-werks
                                                                  gjahr       = <fs_solicitacoes>-gjahr
                                                                  solicitacao = <fs_solicitacoes>-solicitacao
                                                                  stsitm      = '1'. " Pendente
        IF sy-subrc EQ 0.
          CONTINUE.
        ENDIF.

        READ TABLE tl_sol_status TRANSPORTING NO FIELDS WITH KEY  bukrs       = <fs_solicitacoes>-bukrs
                                                                  werks       = <fs_solicitacoes>-werks
                                                                  gjahr       = <fs_solicitacoes>-gjahr
                                                                  solicitacao = <fs_solicitacoes>-solicitacao
                                                                  stsitm      = '2'. " Atestado
        IF sy-subrc EQ 0.
          CONTINUE.
        ENDIF.

        APPEND <fs_solicitacoes> TO tl_sol_st_change.
      ENDLOOP.
    ENDIF.

    IF iv_status EQ '3' OR iv_status = '4'.
      LOOP AT tl_sol_st_change ASSIGNING FIELD-SYMBOL(<fs_sol_st_change>).
        UPDATE ztaa_001
          SET stshdr      = iv_status
        WHERE bukrs       = <fs_sol_st_change>-bukrs
          AND werks       = <fs_sol_st_change>-werks
          AND gjahr       = <fs_sol_st_change>-gjahr
          AND solicitacao = <fs_sol_st_change>-solicitacao.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->APRESENTAR_REL_APROV
* +-------------------------------------------------------------------------------------------------+
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD apresentar_rel_aprov.
    me->buscar_lista_imob_pendentes( iv_status = '1' ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->APRESENTAR_REL_ATESTE
* +-------------------------------------------------------------------------------------------------+
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD apresentar_rel_ateste.
*    me->verificar_acesso_centro( ).
    me->buscar_lista_imob_pendentes( iv_status = '2' ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->APRESENTAR_REL_EXIBICAO
* +-------------------------------------------------------------------------------------------------+
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD apresentar_rel_exibicao.
    me->buscar_lista_imob( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->APROVAR_TRANSFERENCIA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_IMOBILIZADOS                TYPE        TT_LISTA_IMOB
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD aprovar_transferencia.
    DATA:
      sl_msg          TYPE bapiret2,
      tl_imob_aprovar TYPE me->tt_lista_imob,
      tl_texto_transf TYPE STANDARD TABLE OF ztaa_003,
      tl_ztaa_003     TYPE STANDARD TABLE OF ztaa_003,
      vl_aprovador    TYPE ztaa_001-aprov.

    tl_imob_aprovar[] = it_imobilizados[].

    IF tl_imob_aprovar[] IS NOT INITIAL.
      DATA:
        vl_numsol_controle TYPE ztaa_001-solicitacao,
        vl_kostld_controle TYPE ztaa_001-kostld.

*       " Os campos nÃ£o serÃ£o obrigatÃ³rios no momento da aprovaÃ§Ã£o.
*      LOOP AT tl_imob_aprovar ASSIGNING FIELD-SYMBOL(<fs_lista_imob>).
*        IF <fs_lista_imob>-stortd IS INITIAL.
*          sl_msg-type = 'E'.
*          sl_msg-id = 'ZAA'.
*          sl_msg-number = 014.
*          sl_msg-message_v1 = 'LocalizaÃ§Ã£o de Destino'.
*          sl_msg-message_v2 = <fs_lista_imob>-anln1.
*          sl_msg-message_v3 = <fs_lista_imob>-anln2.
*
*          RAISE EXCEPTION TYPE cx_idm_error
*            EXPORTING
*              message = sl_msg.
*        ENDIF.
*
*        IF <fs_lista_imob>-pernr IS INITIAL.
*          sl_msg-type = 'E'.
*          sl_msg-id = 'ZAA'.
*          sl_msg-number = 014.
*          sl_msg-message_v1 = 'ResponsÃ¡vel'.
*          sl_msg-message_v2 = <fs_lista_imob>-anln1.
*          sl_msg-message_v3 = <fs_lista_imob>-anln2.
*
*          RAISE EXCEPTION TYPE cx_idm_error
*            EXPORTING
*              message = sl_msg.
*        ENDIF.
*      ENDLOOP.

**********************************************************************
*     " Executa o evento em modo de teste.
**********************************************************************
      me->executar_evento_591409( iv_check = abap_true it_imobilizados = tl_imob_aprovar ).

      vl_aprovador = me->buscar_pernr_uname( sy-uname ).

      SORT tl_imob_aprovar BY solicitacao kostl.
      LOOP AT tl_imob_aprovar ASSIGNING FIELD-SYMBOL(<fs_imob_aprovar>).

        IF vl_numsol_controle NE <fs_imob_aprovar>-solicitacao OR vl_kostld_controle NE <fs_imob_aprovar>-kostld.
          me->enviar_email_aprovacao(
            EXPORTING
              iv_numsol = <fs_imob_aprovar>-solicitacao            " SolicitaÃ§Ã£o transferÃªncia ativo imobilizado
              iv_kostl  = <fs_imob_aprovar>-kostld                 " Centro de custo destino
          ).
        ENDIF.

**********************************************************************
*       " Vincula o imobilizado ao texto criado de acordo com o numero da solicitaÃ§Ã£o
**********************************************************************
        tl_texto_transf = VALUE #( FOR wl_textos IN me->tg_textos_imob WHERE ( solicitacao = <fs_imob_aprovar>-solicitacao )
        (
          bukrs       = <fs_imob_aprovar>-bukrs
          werks       = <fs_imob_aprovar>-werks
          gjahr       = <fs_imob_aprovar>-gjahr
          solicitacao = <fs_imob_aprovar>-solicitacao
          item        = <fs_imob_aprovar>-item
          id_linha    = wl_textos-id_linha
          texto       = wl_textos-texto
         ) ).

        APPEND LINES OF tl_texto_transf TO tl_ztaa_003.

**********************************************************************
*       " Vincula o texto da solicitaÃ§Ã£o ao nÃºmero da solicitaÃ§Ã£o
**********************************************************************
        tl_texto_transf = VALUE #( FOR wl_textos IN me->tg_texto_sol WHERE ( solicitacao = <fs_imob_aprovar>-solicitacao )
        (
          bukrs       = <fs_imob_aprovar>-bukrs
          werks       = <fs_imob_aprovar>-werks
          gjahr       = <fs_imob_aprovar>-gjahr
          solicitacao = <fs_imob_aprovar>-solicitacao
          id_linha    = wl_textos-id_linha
          texto       = wl_textos-texto
         ) ).

        APPEND LINES OF tl_texto_transf TO tl_ztaa_003.

        UPDATE ztaa_001
          SET stshdr  = '2' " Aguardando aceite
              stortd  = <fs_imob_aprovar>-stortd
              pernr   = <fs_imob_aprovar>-pernr
              bzdat   = sy-datum
              dtaprov = sy-datum
              aprov   = vl_aprovador
        WHERE bukrs          = <fs_imob_aprovar>-bukrs
          AND werks          = <fs_imob_aprovar>-werks
          AND gjahr          = <fs_imob_aprovar>-gjahr
          AND solicitacao    = <fs_imob_aprovar>-solicitacao
          AND item           = <fs_imob_aprovar>-item.

        SORT tl_ztaa_003 BY bukrs werks gjahr solicitacao item id_linha.
        MODIFY ztaa_003 FROM TABLE tl_ztaa_003.

        vl_numsol_controle = <fs_imob_aprovar>-solicitacao.
        vl_kostld_controle = <fs_imob_aprovar>-kostld.

      ENDLOOP.

**********************************************************************
*     " Executa o evento.
**********************************************************************
      me->executar_evento_591409( iv_check = abap_false it_imobilizados = tl_imob_aprovar ).

    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->BUSCAR_DADOS_IMOBILIZADO
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ANLN1                       TYPE        ZTAA_001-ANLN1(optional)
* | [--->] IV_ANLN2                       TYPE        ZTAA_001-ANLN2(optional)
* | [--->] IT_LISTA_IMOB                  TYPE        TT_LISTA_IMOB(optional)
* | [<---] ES_ANLA                        TYPE        TY_ANLA
* | [<---] ET_ANLA                        TYPE        TT_ANLA
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD buscar_dados_imobilizado.
    DATA sl_msg TYPE bapiret2.

    IF it_lista_imob[] IS NOT INITIAL.
      SELECT anla~anln1 anla~anln2 anla~anlkl anla~invnr anla~ord41 anlz~bukrs anlz~kostl anlz~werks anlz~stort anla~txt50
        deakt aktiv
        INTO TABLE et_anla
        FROM anla
          INNER JOIN anlz
            ON anlz~bukrs EQ anla~bukrs
            AND anlz~anln1 EQ anla~anln1
            AND anlz~anln2 EQ anla~anln2
        FOR ALL ENTRIES IN it_lista_imob
        WHERE anla~deakt EQ '00000000'
          AND anlz~bdatu EQ '99991231'
          AND anla~aktiv NE '00000000'
          AND anla~anln1 EQ it_lista_imob-anln1
          AND anla~anln2 EQ it_lista_imob-anln2.

    ELSE.
      SELECT SINGLE anla~anln1 anla~anln2 anla~anlkl anla~invnr anla~ord41 anlz~bukrs anlz~kostl anlz~werks anlz~stort anla~txt50
        deakt aktiv
        INTO es_anla
        FROM anla
          INNER JOIN anlz
            ON anlz~bukrs EQ anla~bukrs
            AND anlz~anln1 EQ anla~anln1
            AND anlz~anln2 EQ anla~anln2
        WHERE anla~anln1 EQ iv_anln1
          AND anla~anln2 EQ iv_anln2
          AND anlz~bdatu EQ '99991231'.
*          AND anla~deakt EQ '00000000'
*          AND anla~aktiv NE '00000000'.

      IF es_anla IS INITIAL.
        RAISE EXCEPTION TYPE cx_idm_error
          EXPORTING
            message = VALUE #(
            type = 'E'
            id = 'ZAA'
            number = 027 " O imobilizado &1/&2 nÃ£o foi encontrado.
            message_v1 = iv_anln1
            message_v2 = iv_anln2 ).
      ENDIF.

      IF es_anla-deakt NE '00000000'.
        RAISE EXCEPTION TYPE cx_idm_error
          EXPORTING
            message = VALUE #(
              type = 'E'
              id = 'ZAA'
              number = 025 " O imobilizado &1/&2 encontra-se baixado.
              message_v1 = iv_anln1
              message_v2 = iv_anln2 ).
      ENDIF.

      IF es_anla-aktiv EQ '00000000'.
        RAISE EXCEPTION TYPE cx_idm_error
          EXPORTING
            message = VALUE #(
              type = 'E'
              id = 'ZAA'
              number = 026 " O imobilizado &1/&2 nÃ£o foi valorizado/incorporado.
              message_v1 = iv_anln1
              message_v2 = iv_anln2 ).
      ENDIF.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->BUSCAR_EMAIL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PERNR                       TYPE        PERNR-PERNR(optional)
* | [--->] IV_UNAME                       TYPE        SY-UNAME(optional)
* | [<-()] RV_E_MAIL                      TYPE        AD_SMTPADR
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD buscar_email.
    DATA:
      vl_uname    TYPE sy-uname,
      vl_pernr_hr TYPE pernr-pernr.

    DATA:
      sl_address TYPE bapiaddr3,
      tl_return  TYPE STANDARD TABLE OF bapiret2.

*************************************************************************************
*	  " Encontra os usuÃ¡rios correspondentes nas tabelas de empregados.
*************************************************************************************
    vl_uname = iv_uname.
    vl_pernr_hr = iv_pernr.

    IF vl_uname IS NOT INITIAL.
      SELECT SINGLE pernr
        INTO vl_pernr_hr
        FROM pa0105
        WHERE subty = '0001'
          AND endda GE sy-datum
          AND begda LE sy-datum
          AND usrid EQ vl_uname.
    ENDIF.

    IF vl_pernr_hr IS NOT INITIAL.
      SELECT SINGLE usrid
        INTO vl_uname
        FROM pa0105
        WHERE pernr = vl_pernr_hr
          AND subty = '0001'
          AND endda GE sy-datum
          AND begda LE sy-datum.
    ENDIF.

    IF vl_uname IS NOT INITIAL.
      CALL FUNCTION 'BAPI_USER_GET_DETAIL'
        EXPORTING
          username = vl_uname
        IMPORTING
          address  = sl_address
        TABLES
          return   = tl_return.

      IF sl_address-e_mail IS NOT INITIAL.
        rv_e_mail = sl_address-e_mail.
        RETURN.
      ENDIF.

      SELECT SINGLE smtp_addr
        INTO rv_e_mail
        FROM usr21
          INNER JOIN adr6 ON usr21~persnumber = adr6~persnumber
        WHERE bname EQ vl_uname.

      IF rv_e_mail IS NOT INITIAL.
        RETURN.
      ENDIF.
    ENDIF.

    IF vl_pernr_hr IS NOT INITIAL.
      SELECT SINGLE usrid_long
        INTO rv_e_mail
        FROM pa0105
        WHERE pernr = vl_pernr_hr
          AND subty = '0010'
          AND endda GE sy-datum
          AND begda LE sy-datum.

      IF rv_e_mail IS NOT INITIAL.
        RETURN.
      ENDIF.
    ENDIF.

    IF tl_return[] IS NOT INITIAL.
      READ TABLE tl_return WITH KEY type = 'E' TRANSPORTING NO FIELDS.
      IF sy-subrc EQ 0.
        RAISE EXCEPTION TYPE cx_idm_error
          EXPORTING
            messages = tl_return.
      ENDIF.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCLAA_TRANSF_IMOBILIZADO=>BUSCAR_EMAIL_FROM_UNAME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_UNAME                       TYPE        SY-UNAME
* | [<-()] RV_EMAIL                       TYPE        ADR6-SMTP_ADDR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD buscar_email_from_uname.
    SELECT smtp_addr
      INTO TABLE @DATA(tl_emails)
      FROM usr21
      INNER JOIN adr6 ON adr6~addrnumber EQ usr21~addrnumber
                     AND adr6~persnumber EQ usr21~persnumber
      WHERE usr21~bname EQ @iv_uname.

    READ TABLE tl_emails INTO rv_email INDEX 1.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCLAA_TRANSF_IMOBILIZADO=>BUSCAR_INFORMACOES_CAMPO
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TABNAME                     TYPE        DDOBJNAME
* | [--->] IV_FIELDNAME                   TYPE        DFIES-FIELDNAME
* | [<-()] RV_DFIES                       TYPE        DFIES
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD buscar_informacoes_campo.
    DATA vl_lfieldname TYPE dfies-lfieldname.

    vl_lfieldname = iv_fieldname.
    CALL FUNCTION 'DDIF_FIELDINFO_GET'
      EXPORTING
        tabname        = iv_tabname
        fieldname      = iv_fieldname
        lfieldname     = vl_lfieldname
      IMPORTING
        dfies_wa       = rv_dfies
      EXCEPTIONS
        not_found      = 1
        internal_error = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCLAA_TRANSF_IMOBILIZADO=>BUSCAR_INFORMACOES_ESTR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ESTRUTURA                   TYPE        DD02L-TABNAME
* | [<-()] RT_FIELDCAT                    TYPE        LVC_T_FCAT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD buscar_informacoes_estr.
    CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
      EXPORTING
        i_structure_name = iv_estrutura
      CHANGING
        ct_fieldcat      = rt_fieldcat.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->BUSCAR_LISTA_IMOB
* +-------------------------------------------------------------------------------------------------+
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD buscar_lista_imob.
    DATA:
      sl_msg          TYPE bapiret2,
      tl_imobilizados TYPE me->tt_lista_imob.

    SELECT ztaa_001~bukrs, ztaa_001~werks, ztaa_001~gjahr, ztaa_001~solicitacao, ztaa_001~item, ztaa_001~crdate
         , ztaa_001~solori, ztaa_001~stshdr, ztaa_001~stsitm, ztaa_001~kostl, ztaa_001~stort, ztaa_001~transtp, ztaa_001~bzdat
         , ztaa_001~werksd, ztaa_001~kostld, ztaa_001~stortd, ztaa_001~pernr, ztaa_001~anln1, ztaa_001~anln2, ztaa_001~invnr
         , ztaa_001~ord41, ztaa_001~vr_contabil, ztaa_001~dtaprov, ztaa_001~aprov
         , txt1~ktext, txt2~ktext AS ktextd, t087t~ordtx
      INTO TABLE @DATA(tl_ztaa_001)
      FROM ztaa_001
        LEFT OUTER JOIN t499s AS txt1
          ON txt1~werks EQ ztaa_001~werks AND txt1~stand EQ ztaa_001~stort
        LEFT OUTER JOIN t499s AS txt2
          ON txt2~werks EQ ztaa_001~werksd AND txt2~stand EQ ztaa_001~stortd
        LEFT OUTER JOIN t087t ON t087t~ord4x EQ ztaa_001~ord41
                             AND t087t~spras EQ @sy-langu
                             AND t087t~ordnr EQ '1'
      WHERE ztaa_001~bukrs EQ @me->vg_bukrs
        AND ztaa_001~werks IN @me->rg_werks_o
        AND ztaa_001~solicitacao IN @me->rg_solic.

    IF tl_ztaa_001[] IS INITIAL.
      sl_msg-type = 'E'.
      sl_msg-id = 'ZAA'.
      sl_msg-number = 013. " A consulta nÃ£o retornou dados.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.
    ENDIF.

    tl_imobilizados = CORRESPONDING #( tl_ztaa_001 ).

    me->buscar_dados_imobilizado(
      EXPORTING
        it_lista_imob = tl_imobilizados
      IMPORTING
        et_anla       = DATA(tl_anla)  ).

    LOOP AT tl_imobilizados ASSIGNING FIELD-SYMBOL(<fs_imobilizados>).
      READ TABLE tl_anla WITH KEY bukrs = <fs_imobilizados>-bukrs anln1 = <fs_imobilizados>-anln1 anln2 = <fs_imobilizados>-anln2 ASSIGNING FIELD-SYMBOL(<fs_anla>).
      IF <fs_anla> IS ASSIGNED.
        <fs_imobilizados> = CORRESPONDING #( BASE ( <fs_imobilizados> ) <fs_anla> ).
      ENDIF.

      UNASSIGN <fs_anla>.
      <fs_imobilizados>-txt_itm = icon_create_text.
      <fs_imobilizados>-txt_sol = icon_create_text.

      me->buscar_texto_dominio( EXPORTING iv_domain_name = 'ZDAA_STS_SOL_TRANSF' iv_value = <fs_imobilizados>-stshdr
                                IMPORTING ev_text = <fs_imobilizados>-stshdr_ddk ).

      me->buscar_texto_dominio( EXPORTING iv_domain_name = 'ZDAA_STS_ITM_SOL_TRANSF' iv_value = <fs_imobilizados>-stsitm
                                IMPORTING ev_text = <fs_imobilizados>-stsitm_ddk ).

      me->buscar_texto_dominio( EXPORTING iv_domain_name = 'ZDAA_TIPO_TRANSF' iv_value = <fs_imobilizados>-transtp
                                IMPORTING ev_text = <fs_imobilizados>-dcr_transtp ).

      APPEND <fs_imobilizados> TO me->tg_lista_imob.
    ENDLOOP.

    SELECT *
      INTO TABLE me->tg_textos_imob
      FROM ztaa_003
      FOR ALL ENTRIES IN me->tg_lista_imob
      WHERE bukrs       EQ me->tg_lista_imob-bukrs
        AND werks       EQ me->tg_lista_imob-werks
        AND gjahr       EQ me->tg_lista_imob-gjahr
        AND solicitacao EQ me->tg_lista_imob-solicitacao
        AND item        EQ me->tg_lista_imob-item.

    SELECT *
      INTO TABLE me->tg_texto_sol
      FROM ztaa_003
      FOR ALL ENTRIES IN me->tg_lista_imob
      WHERE bukrs       EQ me->tg_lista_imob-bukrs
        AND werks       EQ me->tg_lista_imob-werks
        AND gjahr       EQ me->tg_lista_imob-gjahr
        AND solicitacao EQ me->tg_lista_imob-solicitacao
        AND item        EQ 0000. " NÃ£o possui item! Significa que Ã© o header

    SORT me->tg_lista_imob BY bukrs werks gjahr solicitacao item.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->BUSCAR_LISTA_IMOB_PENDENTES
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_STATUS                      TYPE        ZTAA_001-STSHDR
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD buscar_lista_imob_pendentes.
    DATA:
      sl_msg          TYPE bapiret2,
      tl_imobilizados TYPE me->tt_lista_imob.

    SELECT ztaa_001~bukrs, ztaa_001~werks, ztaa_001~gjahr, ztaa_001~solicitacao, ztaa_001~item, ztaa_001~crdate
             , ztaa_001~solori, ztaa_001~stshdr, ztaa_001~stsitm, ztaa_001~kostl, ztaa_001~stort, ztaa_001~transtp, ztaa_001~bzdat
             , ztaa_001~werksd, ztaa_001~kostld, ztaa_001~stortd, ztaa_001~pernr, ztaa_001~anln1, ztaa_001~anln2, ztaa_001~invnr
             , ztaa_001~ord41, ztaa_001~vr_contabil, ztaa_001~dtaprov, ztaa_001~aprov
             , txt1~ktext, txt2~ktext AS ktextd
    INTO TABLE @DATA(tl_ztaa_001)
    FROM ztaa_001
      LEFT OUTER JOIN t499s AS txt1
        ON txt1~werks EQ ztaa_001~werks AND txt1~stand EQ ztaa_001~stort
      LEFT OUTER JOIN t499s AS txt2
        ON txt2~werks EQ ztaa_001~werksd AND txt2~stand EQ ztaa_001~stortd
    WHERE bukrs EQ @me->vg_bukrs
      AND kostl IN @me->rg_kostl_o
      AND solicitacao IN @me->rg_solic
      AND stshdr EQ @iv_status
      AND stsitm EQ '1'. " IrÃ¡ apresentar apenas os itens pendentes

    IF tl_ztaa_001[] IS INITIAL.
      sl_msg-type = 'E'.
      sl_msg-id = 'ZAA'.
      sl_msg-number = 013. " A consulta nÃ£o retornou dados.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.
    ENDIF.

    tl_imobilizados = CORRESPONDING #( tl_ztaa_001 ).

    me->buscar_dados_imobilizado(
      EXPORTING
        it_lista_imob = tl_imobilizados
      IMPORTING
        et_anla       = DATA(tl_anla)  ).

    LOOP AT tl_imobilizados ASSIGNING FIELD-SYMBOL(<fs_imobilizados>).
      READ TABLE tl_anla WITH KEY bukrs = <fs_imobilizados>-bukrs anln1 = <fs_imobilizados>-anln1 anln2 = <fs_imobilizados>-anln2 ASSIGNING FIELD-SYMBOL(<fs_anla>).
      IF <fs_anla> IS ASSIGNED.
        <fs_imobilizados> = CORRESPONDING #( BASE ( <fs_imobilizados> ) <fs_anla> ).
      ENDIF.

      UNASSIGN <fs_anla>.
      <fs_imobilizados>-txt_itm = icon_create_text.
      <fs_imobilizados>-txt_sol = icon_create_text.
      APPEND <fs_imobilizados> TO me->tg_lista_imob.
    ENDLOOP.

    SELECT *
      INTO TABLE me->tg_textos_imob
      FROM ztaa_003
      FOR ALL ENTRIES IN me->tg_lista_imob
      WHERE bukrs       EQ me->tg_lista_imob-bukrs
        AND werks       EQ me->tg_lista_imob-werks
        AND gjahr       EQ me->tg_lista_imob-gjahr
        AND solicitacao EQ me->tg_lista_imob-solicitacao
        AND item        EQ me->tg_lista_imob-item.

    SELECT *
      INTO TABLE me->tg_texto_sol
      FROM ztaa_003
      FOR ALL ENTRIES IN me->tg_lista_imob
      WHERE bukrs       EQ me->tg_lista_imob-bukrs
        AND werks       EQ me->tg_lista_imob-werks
        AND gjahr       EQ me->tg_lista_imob-gjahr
        AND solicitacao EQ me->tg_lista_imob-solicitacao
        AND item        EQ 0000. " NÃ£o possui item! Significa que Ã© o header
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->BUSCAR_PERNR_UNAME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_UNAME                       TYPE        SY-UNAME
* | [<-()] RV_PERNR                       TYPE        PA0105-PERNR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD buscar_pernr_uname.
*   " Recupera as informaÃ§Ãµes do responsÃ¡vel pela criaÃ§Ã£o do objeto.
    DATA:
      vl_usrid             TYPE p0105-usrid,
      vl_pernr_modificador TYPE p0105-pernr.

    vl_usrid = iv_uname.
    CALL FUNCTION 'RP_GET_PERNR_FROM_USERID'
      EXPORTING
        begda     = sy-datum
        endda     = sy-datum
        usrid     = vl_usrid
        usrty     = '0001'
      IMPORTING
        usr_pernr = rv_pernr
      EXCEPTIONS
        retcd     = 1
        OTHERS    = 2.
    IF sy-subrc <> 0.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->BUSCAR_TEXTO_DOMINIO
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_DOMAIN_NAME                 TYPE        DD01L-DOMNAME
* | [--->] IV_VALUE                       TYPE        ANY
* | [<---] EV_TEXT                        TYPE        ANY
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD buscar_texto_dominio.
    DATA:
      tl_dd07v_tab_a TYPE STANDARD TABLE OF dd07v,
      tl_dd07v_tab_n TYPE STANDARD TABLE OF dd07v.

    CALL FUNCTION 'DD_DOMA_GET'
      EXPORTING
        domain_name   = iv_domain_name
      TABLES
        dd07v_tab_a   = tl_dd07v_tab_a
        dd07v_tab_n   = tl_dd07v_tab_n
      EXCEPTIONS
        illegal_value = 1
        op_failure    = 2
        OTHERS        = 3.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ELSE.
      READ TABLE tl_dd07v_tab_a WITH KEY domvalue_l = iv_value INTO DATA(wl_value).
      IF sy-subrc EQ 0.
        ev_text = wl_value-ddtext.
      ELSE.
        CLEAR ev_text.
      ENDIF.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->CHECK_ALV_OO
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_ATIVO                       TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_alv_oo.
    IF me->og_alv_oo IS BOUND.
      rv_ativo = abap_true.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->CONFIRMAR_ENVIO
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TITLE                       TYPE        STRING
* | [--->] IV_QUESTION                    TYPE        STRING
* | [<-()] RV_CONFIRMAR                   TYPE        ABAP_BOOL
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD confirmar_envio.
    DATA vl_answer TYPE char1.
    DATA sl_msg TYPE bapiret2.
    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
        titlebar       = iv_title " 'Confirmar TransferÃªncia'
        text_question  = iv_question " 'Deseja enviar para aprovaÃ§Ã£o?'
        text_button_1  = 'Sim'
        text_button_2  = 'NÃ£o'
        start_column   = 40
        start_row      = 8
      IMPORTING
        answer         = vl_answer
      EXCEPTIONS
        text_not_found = 1
        OTHERS         = 2.

    IF vl_answer EQ '1'.
      rv_confirmar = abap_true.
    ELSE.
      sl_msg-type = 'E'.
      sl_msg-id = 'ZAA'.
      sl_msg-number = 005. " OperaÃ§Ã£o cancelada pelo usuÃ¡rio.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_BUKRS                       TYPE        ZTAA_001-BUKRS(optional)
* | [--->] IR_WERKS                       TYPE        TR_WERKS(optional)
* | [--->] IR_KOSTL                       TYPE        TR_KOSTL(optional)
* | [--->] IV_ACAO                        TYPE        SY-UCOMM(optional)
* | [--->] IR_SOLIC                       TYPE        TR_SOLIC(optional)
* | [--->] IV_LAYOUT                      TYPE        DISVARIANT-VARIANT(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    me->vg_bukrs    = iv_bukrs.
    me->rg_werks_o  = ir_werks.
    me->rg_kostl_o  = ir_kostl.
    me->vg_acao     = iv_acao .
    me->rg_solic[]  = ir_solic[].
    me->vg_layout   = iv_layout.

    IF iv_acao EQ me->c_criar.
      me->vg_solic = me->c_sol_inicial.
    ELSE.
      READ TABLE me->rg_solic INTO DATA(wl_solic) INDEX 1.
      me->vg_solic = wl_solic-low.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->CRIAR_ALV_ACEITE_APROV
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD criar_alv_aceite_aprov.
    DATA:
      c_container TYPE scrfname VALUE 'ALV_CONTAINER',
      sl_layout   TYPE lvc_s_layo.

    cl_gui_cfw=>flush( ).

    me->og_container = NEW cl_gui_custom_container( container_name = c_container ).

**********************************************************************
*   " CriaÃ§Ã£o do header do ALV.
**********************************************************************
    DATA(ol_ref_splitter) = NEW cl_gui_splitter_container( parent = me->og_container rows = 2 columns = 1 ).

    me->og_header_container = ol_ref_splitter->get_container( row = 1 column = 1 ).
    ol_ref_splitter->set_row_height( id =  1 height =  20 ).

**********************************************************************
*   " CriaÃ§Ã£o do corpo do ALV.
**********************************************************************
    me->og_body_container = ol_ref_splitter->get_container( row = 2 column = 1 ).
    me->og_alv_oo = NEW cl_gui_alv_grid( i_parent = me->og_body_container ).

    SET HANDLER me->handle_top_of_page FOR me->og_alv_oo.
    SET HANDLER me->handle_print_top_of_page FOR me->og_alv_oo.
    SET HANDLER me->handle_button_click FOR me->og_alv_oo.
    SET HANDLER me->handle_data_changed FOR me->og_alv_oo.
    SET HANDLER me->handle_onf4 FOR me->og_alv_oo.

    DATA(tl_fieldcatalog) = me->montar_fieldcat_alv_aceite( ).
    DATA(tl_excluir) = me->excluir_funcionalidades( ).

    sl_layout-zebra = abap_true.
    sl_layout-stylefname = 'CELLTAB'.

    IF sy-cprog EQ 'ZAA_007'.
      sl_layout-no_rowmark = abap_true.
    ENDIF.

*    me->og_alv_oo->register_edit_event( i_event_id = cl_gui_alv_grid=>mc_evt_enter ).
    me->og_alv_oo->register_edit_event( i_event_id = cl_gui_alv_grid=>mc_evt_modified ).

    me->og_alv_oo->set_table_for_first_display(
      EXPORTING
        it_toolbar_excluding  = tl_excluir
        is_layout             = sl_layout
      CHANGING
        it_fieldcatalog       = tl_fieldcatalog
        it_outtab             = me->tg_lista_imob[] ).

*    IF sy-cprog EQ 'ZAA_007'. " Report de AprovaÃ§Ã£o
    me->og_alv_oo->set_ready_for_input( i_ready_for_input = 1 ).
*    ELSE.
*      me->og_alv_oo->set_ready_for_input( i_ready_for_input = 0 ).
*    ENDIF.

    me->og_ref_doc = NEW cl_dd_document( ).
    me->og_alv_oo->list_processing_events( i_event_name = 'TOP_OF_PAGE' i_dyndoc_id  = me->og_ref_doc ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->CRIAR_ALV_EXIBICAO
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_READ_ONLY                   TYPE        ABAP_BOOL(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD criar_alv_exibicao.
    DATA:
      c_container TYPE scrfname VALUE 'ALV_CONTAINER',
      sl_layout   TYPE lvc_s_layo,
      sl_variant  TYPE disvariant.

    cl_gui_cfw=>flush( ).

    me->og_container = NEW cl_gui_custom_container( container_name = c_container ).
    me->og_alv_oo = NEW cl_gui_alv_grid( i_parent = me->og_container ).

*    SET HANDLER me->handle_data_changed FOR me->og_alv_oo.
    SET HANDLER me->handle_button_click FOR me->og_alv_oo.

    DATA(tl_fieldcatalog) = me->montar_fieldcat_9002( ).
    DATA(tl_excluir) = me->excluir_funcionalidades( iv_bloq = abap_true ).

    sl_layout-zebra = abap_true.
    sl_layout-stylefname = 'CELLTAB'.

    CLEAR sl_variant.
    sl_variant-report    = sy-cprog.
    sl_variant-username  = sy-uname.
    sl_variant-variant   = me->vg_layout.

*    me->og_alv_oo->register_edit_event( i_event_id = cl_gui_alv_grid=>mc_evt_enter ).
*    me->og_alv_oo->register_edit_event( i_event_id = cl_gui_alv_grid=>mc_evt_modified ).

    me->og_alv_oo->set_table_for_first_display(
      EXPORTING
        is_variant            = sl_variant
        it_toolbar_excluding  = tl_excluir
        is_layout             = sl_layout
        i_save                = 'A'
        i_default             = 'X'
      CHANGING
        it_fieldcatalog       = tl_fieldcatalog
        it_outtab             = me->tg_lista_imob[] ).

    IF iv_read_only EQ abap_true.
      me->og_alv_oo->set_ready_for_input( i_ready_for_input = 0 ).
    ELSE.
      me->og_alv_oo->set_ready_for_input( i_ready_for_input = 1 ).
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->CRIAR_ALV_TRANSFERENCIA
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD criar_alv_transferencia.
    DATA:
      c_container TYPE scrfname VALUE 'ALV_CONTAINER',
      sl_layout   TYPE lvc_s_layo.

    cl_gui_cfw=>flush( ).

    me->og_container = NEW cl_gui_custom_container( container_name = c_container ).
    me->og_alv_oo = NEW cl_gui_alv_grid( i_parent = me->og_container ).

    me->og_alv_oo->set_gridtitle( i_gridtitle = 'Lista de Ativos Imobilizados' ).

    SET HANDLER me->handle_data_changed FOR me->og_alv_oo.
    SET HANDLER me->handle_button_click FOR me->og_alv_oo.
    SET HANDLER me->handle_onf4 FOR me->og_alv_oo.

    DATA(tl_fieldcatalog) = me->montar_fieldcat_9001( ).
    DATA(tl_excluir) = me->excluir_funcionalidades( ).

    sl_layout-zebra = abap_true.
    sl_layout-stylefname = 'CELLTAB'.

    "register F4 event
    me->og_alv_oo->register_f4_for_fields(
      EXPORTING
        it_f4 = VALUE #( (
          fieldname = 'ANLN1'
          register = abap_true  ) ) ).
*          getbefore = abap_true
*          chngeafter = abap_true ) ) ).

*    me->og_alv_oo->register_edit_event( i_event_id = cl_gui_alv_grid=>mc_evt_enter ).
    me->og_alv_oo->register_edit_event( i_event_id = cl_gui_alv_grid=>mc_evt_modified ).

    me->og_alv_oo->set_table_for_first_display(
      EXPORTING
        it_toolbar_excluding  = tl_excluir
        is_layout             = sl_layout
      CHANGING
        it_fieldcatalog       = tl_fieldcatalog
        it_outtab             = me->tg_lista_imob[] ).

    me->og_alv_oo->set_ready_for_input( i_ready_for_input = 1 ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->CRIAR_DROPDOWN_STATUSITEM
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD criar_dropdown_statusitem.
    DATA:
      lt_dropdown TYPE lvc_t_drop,
      ls_dropdown TYPE lvc_s_drop,
      lt_dral     TYPE lvc_t_dral,
      ls_dral     TYPE lvc_s_dral.

    ls_dropdown-handle = '1'.
    me->buscar_texto_dominio(
      EXPORTING
        iv_domain_name = 'ZDAA_STS_ITM_SOL_TRANSF' iv_value = '5'
      IMPORTING
        ev_text = ls_dropdown-value ).

    APPEND ls_dropdown TO lt_dropdown.

    ls_dropdown-handle = '1'.
    me->buscar_texto_dominio(
      EXPORTING
        iv_domain_name = 'ZDAA_STS_ITM_SOL_TRANSF' iv_value = '3'
      IMPORTING
        ev_text = ls_dropdown-value ).

    APPEND ls_dropdown TO lt_dropdown.

    me->og_alv_oo->set_drop_down_table(
      it_drop_down = lt_dropdown ).

    DATA: it_f4 TYPE lvc_t_f4,
          wa_f4 TYPE lvc_s_f4.

    wa_f4-fieldname = 'STSITM'.
    wa_f4-register = 'X'.
    wa_f4-getbefore = 'X'.
    wa_f4-chngeafter = 'X'.
    APPEND wa_f4 TO it_f4.

    wa_f4-fieldname = 'STSITM_DDK'.
    wa_f4-register = 'X'.
    wa_f4-getbefore = 'X'.
    wa_f4-chngeafter = 'X'.
    APPEND wa_f4 TO it_f4.

    "register F4 event
    me->og_alv_oo->register_f4_for_fields(
      EXPORTING
        it_f4 = it_f4 ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->DELETED_ROWS
* +-------------------------------------------------------------------------------------------------+
* | [<-->] CR_DATA_CHANGED                TYPE REF TO CL_ALV_CHANGED_DATA_PROTOCOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD deleted_rows.
*    LOOP AT cr_data_changed->mt_deleted_rows ASSIGNING FIELD-SYMBOL(<fs_deleted_rows>).
*      DELETE me->tg_lista_imob INDEX <fs_deleted_rows>-row_id.
*    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->ENVIAR_ACEITE
* +-------------------------------------------------------------------------------------------------+
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD enviar_aceite.
    DATA:
      sl_msg             TYPE bapiret2,
      tl_imob_transferir TYPE me->tt_lista_imob.

    me->og_alv_oo->get_selected_rows( IMPORTING  et_index_rows = DATA(tl_selected_rows) ).

    IF tl_selected_rows[] IS INITIAL.
      sl_msg-type = 'E'.
      sl_msg-id = 'ZAA'.
      sl_msg-number = 015. " Selecione ao menos uma linha.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.
    ENDIF.

**********************************************************************
*   " Verifica se as linhas selecionadas podem ser transferidas
**********************************************************************
    LOOP AT tl_selected_rows ASSIGNING FIELD-SYMBOL(<fs_rows>).
      READ TABLE me->tg_lista_imob INDEX <fs_rows>-index ASSIGNING FIELD-SYMBOL(<fs_lista_imob>).
      IF <fs_lista_imob> IS ASSIGNED.
        APPEND <fs_lista_imob> TO tl_imob_transferir.
      ENDIF.

      UNASSIGN <fs_lista_imob>.
    ENDLOOP.

    me->iniciar_bal_log( ).

    TRY .
        me->aceitar_transferencia( it_imobilizados = tl_imob_transferir ).
      CATCH cx_idm_error INTO DATA(ol_msg).
*       " Apenas em caso de err com LOG.
        IF ol_msg->message-id EQ 'ZAA' AND ol_msg->message-number EQ 021.
          me->og_alv_oo->refresh_table_display( ).
          me->og_bal_log->salvar( ).
          me->og_bal_log->display_log( ).
        ENDIF.

        RAISE EXCEPTION TYPE cx_idm_error
          EXPORTING
            message  = ol_msg->message
            messages = ol_msg->messages.
    ENDTRY.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->ENVIAR_APROVACAO
* +-------------------------------------------------------------------------------------------------+
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD enviar_aprovacao.
* " SoluÃ§Ã£o nova.
    me->aprovar_transferencia( it_imobilizados = me->tg_lista_imob ).

    COMMIT WORK.
* " ApÃ³s conversa com o GildÃ¡zio, a seleÃ§Ã£o invividual de todos os itens se tornarÃ¡ obrigatÃ³ria
* "ao fiscal, no momento da AprovaÃ§Ã£o. EntÃ£o, nÃ£o serÃ¡ necessÃ¡rio buscar os itens selecionados.
*    DATA tl_imob_transferir TYPE me->tt_lista_imob.
*    me->og_alv_oo->get_selected_rows( IMPORTING  et_index_rows = DATA(tl_selected_rows) ).
*
*    IF tl_selected_rows[] IS INITIAL.
*      sl_msg-type = 'E'.
*      sl_msg-id = 'ZAA'.
*      sl_msg-number = 015.
*
*      RAISE EXCEPTION TYPE cx_idm_error
*        EXPORTING
*          message = sl_msg.
*    ENDIF.
*
***********************************************************************
**   " Verifica se as linhas selecionadas podem ser transferidas
***********************************************************************
*    LOOP AT tl_selected_rows ASSIGNING FIELD-SYMBOL(<fs_rows>).
*      READ TABLE me->tg_lista_imob INDEX <fs_rows>-index ASSIGNING FIELD-SYMBOL(<fs_lista_imob>).
*      IF <fs_lista_imob> IS ASSIGNED.
*        IF <fs_lista_imob>-stortd IS INITIAL.
*          sl_msg-type = 'E'.
*          sl_msg-id = 'ZAA'.
*          sl_msg-number = 014.
*          sl_msg-message_v1 = 'LocalizaÃ§Ã£o de Destino'.
*          sl_msg-message_v2 = <fs_lista_imob>-anln1.
*          sl_msg-message_v3 = <fs_lista_imob>-anln2.
*
*          RAISE EXCEPTION TYPE cx_idm_error
*            EXPORTING
*              message = sl_msg.
*        ENDIF.
*
*        IF <fs_lista_imob>-pernr IS INITIAL.
*          sl_msg-type = 'E'.
*          sl_msg-id = 'ZAA'.
*          sl_msg-number = 014.
*          sl_msg-message_v1 = 'ResponsÃ¡vel'.
*          sl_msg-message_v2 = <fs_lista_imob>-anln1.
*          sl_msg-message_v3 = <fs_lista_imob>-anln2.
*
*          RAISE EXCEPTION TYPE cx_idm_error
*            EXPORTING
*              message = sl_msg.
*        ENDIF.
*
*        APPEND <fs_lista_imob> TO tl_imob_transferir.
*      ENDIF.
*
*      UNASSIGN <fs_lista_imob>.
*    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->ENVIAR_APROV_RECUS_INDIVIDUAL
* +-------------------------------------------------------------------------------------------------+
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD enviar_aprov_recus_individual.
    DATA:
      vl_aprova     TYPE lvc_s_drop-value,
      vl_recusa     TYPE lvc_s_drop-value,
      sl_msg        TYPE bapiret2,
      tl_imob_aprov TYPE me->tt_lista_imob,
      tl_imob_recus TYPE me->tt_lista_imob.

*************************************************************************************************************************
*   " set_drop_down_table - soluÃ§Ã£o para o LISTBOX. ForÃ§a o evento HANDLE_DATA_CHANGED check_changed_data
*************************************************************************************************************************
    me->og_alv_oo->check_changed_data( ).

    me->buscar_texto_dominio(
      EXPORTING
        iv_domain_name = 'ZDAA_STS_ITM_SOL_TRANSF' iv_value = '5' " Aprovado
      IMPORTING
        ev_text = vl_aprova ).

    me->buscar_texto_dominio(
      EXPORTING
        iv_domain_name = 'ZDAA_STS_ITM_SOL_TRANSF' iv_value = '3' " Recusado
      IMPORTING
        ev_text = vl_recusa ).

*    TRANSLATE vl_aprova TO UPPER CASE.
*    TRANSLATE vl_recusa TO UPPER CASE.

    LOOP AT me->tg_lista_imob ASSIGNING FIELD-SYMBOL(<fs_lista_imob>).
*      TRANSLATE <fs_lista_imob>-stsitm_ddk TO UPPER CASE.
      CASE <fs_lista_imob>-stsitm_ddk.
        WHEN vl_aprova.
          APPEND <fs_lista_imob> TO tl_imob_aprov.

        WHEN vl_recusa.
          APPEND <fs_lista_imob> TO tl_imob_recus.

        WHEN OTHERS.
          IF <fs_lista_imob>-stsitm_ddk IS INITIAL.
            sl_msg-number = 019. " O status do imobilizado &1/&2 nÃ£o foi informado.

          ELSE.
            sl_msg-number = 022. " O status do imobilizado &1/&2 nÃ£o Ã© vÃ¡lido.

          ENDIF.

          sl_msg-type = 'E'.
          sl_msg-id = 'ZAA'.
          sl_msg-message_v1 = <fs_lista_imob>-anln1.
          sl_msg-message_v2 = <fs_lista_imob>-anln2.

          RAISE EXCEPTION TYPE cx_idm_error
            EXPORTING
              message = sl_msg.
      ENDCASE.
    ENDLOOP.

    IF tl_imob_aprov[] IS NOT INITIAL.
      me->aprovar_transferencia( it_imobilizados = tl_imob_aprov ).
    ENDIF.

    IF tl_imob_recus[] IS NOT INITIAL.
      me->recusar_transferencia( it_imobilizados = tl_imob_recus ).
    ENDIF.

    COMMIT WORK.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->ENVIAR_EMAIL_APROVACAO
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NUMSOL                      TYPE        ZTAA_001-SOLICITACAO
* | [--->] IV_KOSTL                       TYPE        ZTAA_001-KOSTLD
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD enviar_email_aprovacao.
    DATA:
      sl_msg         TYPE bapiret2,
      vl_email_cc    TYPE ad_smtpadr,
      tl_corpo_email TYPE bcsy_text,
      wl_corpo_email LIKE LINE OF tl_corpo_email.

    SELECT SINGLE verak_user
      INTO @DATA(vl_resp_centro)
      FROM csks
      WHERE kostl EQ @iv_kostl
        AND datbi EQ '99991231'.

    IF vl_resp_centro IS INITIAL.
      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = VALUE #( id = 'ZAA' number = 024 type = 'E' ). " ResponsÃ¡vel do centro de custo de destino nÃ£o identificado.
    ENDIF.

    DATA:
      sl_address TYPE bapiaddr3,
      tl_return  TYPE STANDARD TABLE OF bapiret2.

*************************************************************************************
*	  " Retorna o e-mail do responsÃ¡vel.
*************************************************************************************
    sl_address-e_mail = me->buscar_email( iv_uname = vl_resp_centro ).

***    CALL FUNCTION 'BAPI_USER_GET_DETAIL'
***      EXPORTING
***        username = vl_resp_centro
***      IMPORTING
***        address  = sl_address
***      TABLES
***        return   = tl_return.
***
***    IF tl_return[] IS NOT INITIAL.
***      READ TABLE tl_return INTO sl_msg WITH KEY type = 'E'.
***      IF sl_msg IS NOT INITIAL.
***        RAISE EXCEPTION TYPE cx_idm_error
***          EXPORTING
***            message = sl_msg.
***      ENDIF.
***    ENDIF.


*************************************************************************************
*	  " Buscar e-mail do solicitante para envio de cÃ³pia
*************************************************************************************
    SELECT SINGLE solori
      INTO @DATA(vl_id_solicitante)
      FROM ztaa_001
      WHERE solicitacao EQ @iv_numsol.

    IF vl_id_solicitante IS NOT INITIAL.
      vl_email_cc = me->buscar_email( iv_pernr = vl_id_solicitante ).

***      SELECT SINGLE usrid_long
***        INTO @DATA(vl_email_solicitante)
***        FROM pa0105
***        WHERE subty EQ '0010'
***          AND pernr EQ @vl_id_solicitante
***          AND endda GE @sy-datum
***          AND begda LE @sy-datum.
***
***      IF vl_email_solicitante IS INITIAL.
***        SELECT SINGLE usrid
***          INTO @DATA(vl_usrid)
***          FROM pa0105
***          WHERE subty EQ '0001'
***            AND pernr EQ @vl_id_solicitante
***            AND endda GE @sy-datum
***            AND begda LE @sy-datum.
***
***        DATA vl_username TYPE bapibname-bapibname.
***        vl_username = vl_usrid.
***
***        DATA:
***          sl_address_cc TYPE bapiaddr3.
***
***        CALL FUNCTION 'BAPI_USER_GET_DETAIL'
***          EXPORTING
***            username = vl_username
***          IMPORTING
***            address  = sl_address_cc
***          TABLES
***            return   = tl_return.
***
***        READ TABLE tl_return WITH KEY type = 'E' TRANSPORTING NO FIELDS.
***        IF sy-subrc EQ 0.
***          vl_email_cc = sl_address_cc-e_mail.
***        ENDIF.
***
***      ELSE.
***        vl_email_cc = vl_email_solicitante.
***      ENDIF.
    ENDIF.

*   " Busca o texto do e-mail
    DATA tl_lines TYPE STANDARD TABLE OF tline.
    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        id                      = 'ST'
        language                = 'P'
        name                    = 'ZAA_TRANSF_EMAIL_APROV'
        object                  = 'TEXT'
      TABLES
        lines                   = tl_lines
      EXCEPTIONS
        id                      = 1
        language                = 2
        name                    = 3
        not_found               = 4
        object                  = 5
        reference_check         = 6
        wrong_access_to_archive = 7
        OTHERS                  = 8.

    IF sy-subrc <> 0.
      sl_msg-type   = sy-msgty.
      sl_msg-id     = sy-msgid.
      sl_msg-number = sy-msgno.
      sl_msg-message_v1 = sy-msgv1.
      sl_msg-message_v2 = sy-msgv2.
      sl_msg-message_v3 = sy-msgv3.
      sl_msg-message_v4 = sy-msgv4.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.
    ENDIF.

    LOOP AT tl_lines ASSIGNING FIELD-SYMBOL(<fs_linha>).
      wl_corpo_email = <fs_linha>-tdline.

      IF wl_corpo_email CS '##NUMSOL##'.
        REPLACE '##NUMSOL##' WITH iv_numsol INTO wl_corpo_email.
      ENDIF.

      IF wl_corpo_email CS '##CENTRODECUSTO##'.
        REPLACE '##CENTRODECUSTO##' WITH iv_kostl INTO wl_corpo_email.
      ENDIF.

      IF wl_corpo_email CS  '<(>,<)>'.
        REPLACE '<(>,<)>' WITH ',' INTO wl_corpo_email.
      ENDIF.

      APPEND wl_corpo_email TO tl_corpo_email.
    ENDLOOP.

*   " Efetiva o envio do e-mail.
    IF sl_address-e_mail IS NOT INITIAL.

      zcl_utilities=>enviar_email(
        EXPORTING
          iv_remetente_uname = sy-uname
*          iv_remetente       =
          iv_assunto            = |SolicitaÃ§Ã£o de TransferÃªncia { iv_numsol }|
          it_conteudo           = tl_corpo_email
          it_destinatarios      = VALUE bcsy_smtpa( ( sl_address-e_mail ) ( vl_email_cc )  )   " BCS: tabela interna com endereÃ§os SMTP
*          it_destinatarios_cc   = VALUE bcsy_smtpa( ( vl_email_cc )  )
      ).
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->ENVIAR_EMAIL_FISCAL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_SOLIC                       TYPE        ZTAA_001-SOLICITACAO
* | [--->] IV_KOSTL_D                     TYPE        ZTAA_001-KOSTLD
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD enviar_email_fiscal.
    TYPES tt_set TYPE RANGE OF adr6-persnumber.
    DATA:
      sl_msg         TYPE bapiret2,
      tl_set         TYPE STANDARD TABLE OF rgsb4,
      tl_corpo_email TYPE bcsy_text,
      wl_corpo_email LIKE LINE OF tl_corpo_email.

*   " Busca os destinatÃ¡rios do e-mail
    DATA vl_param3 TYPE /pgtpa/param_par-param3.
    READ TABLE me->rg_werks_o INTO DATA(wl_werks) INDEX 1.
    vl_param3 = wl_werks-low.

    DATA rl_user_email TYPE RANGE OF sy-uname.
    CALL FUNCTION '/PGTPA/PARAM_BUSCA_VALORES'
      EXPORTING
        i_modulo            = 'AA'
        i_param1            = 'EMAIL'
        i_param2            = 'FISCAL'
        i_param3            = vl_param3
      TABLES
        t_range             = rl_user_email
      EXCEPTIONS
        nao_encontrado      = 1
        range_nao_informado = 2
        OTHERS              = 3.

    IF rl_user_email[] IS INITIAL.
*     raise.
    ENDIF.

*   " Busca o texto do e-mail
    DATA tl_lines TYPE STANDARD TABLE OF tline.
    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        id                      = 'ST'
        language                = 'P'
        name                    = 'ZAA_TRANSF_EMAIL_FISC'
        object                  = 'TEXT'
      TABLES
        lines                   = tl_lines
      EXCEPTIONS
        id                      = 1
        language                = 2
        name                    = 3
        not_found               = 4
        object                  = 5
        reference_check         = 6
        wrong_access_to_archive = 7
        OTHERS                  = 8.
    IF sy-subrc <> 0.
      sl_msg-type   = sy-msgty.
      sl_msg-id     = sy-msgid.
      sl_msg-number = sy-msgno.
      sl_msg-message_v1 = sy-msgv1.
      sl_msg-message_v2 = sy-msgv2.
      sl_msg-message_v3 = sy-msgv3.
      sl_msg-message_v4 = sy-msgv4.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.
    ENDIF.

    LOOP AT tl_lines ASSIGNING FIELD-SYMBOL(<fs_linha>).
      wl_corpo_email = <fs_linha>-tdline.

      IF wl_corpo_email CS '##NUMSOL##'.
        REPLACE '##NUMSOL##' WITH iv_solic INTO wl_corpo_email.
      ENDIF.

      IF wl_corpo_email CS '##CENTRODECUSTO##'.
        REPLACE '##CENTRODECUSTO##' WITH iv_kostl_d INTO wl_corpo_email.
      ENDIF.

      IF wl_corpo_email CS  '<(>,<)>'.
        REPLACE '<(>,<)>' WITH ',' INTO wl_corpo_email.
      ENDIF.

      APPEND wl_corpo_email TO tl_corpo_email.
    ENDLOOP.

**********************************************************************
*   " Efetiva o envio do e-mail.
**********************************************************************
    IF rl_user_email[] IS NOT INITIAL AND tl_corpo_email[] IS NOT INITIAL.
      zcl_utilities=>enviar_email(
        EXPORTING
          iv_remetente_uname = sy-uname
          iv_assunto              = |SolicitaÃ§Ã£o de TransferÃªncia { iv_solic }|
          it_conteudo             = tl_corpo_email
*         " Neste FOR os dados da tabela de emails sÃ£o inseridos no range de entrada do mÃ©todo de envio de e-mails.
*         " Caso os valores contidos em HIGH sejam iguais a 'PARA', sÃ£o armazenados no destinatÃ¡rio.
*         " Caso os valores contidos em HIGH sejam iguais a 'CC', sÃ£o armazenados na tabela de cÃ³pia.
          it_destinatarios        = VALUE #(
            FOR wl_dest IN rl_user_email WHERE ( high = 'PARA' )
              ( zclaa_transf_imobilizado=>buscar_email_from_uname( iv_uname = wl_dest-low ) ) )
          it_destinatarios_cc     = VALUE #(
            FOR wl_dest IN rl_user_email WHERE ( high = 'CC' )
              ( zclaa_transf_imobilizado=>buscar_email_from_uname( iv_uname = wl_dest-low ) ) )
*          ir_uname_destinatarios  = VALUE #( FOR wl_dest IN rl_user_email WHERE ( high = 'PARA' ) ( sign = wl_dest-sign option = wl_dest-option low = wl_dest-low high = ''  ) )
*          ir_uname_copia          = VALUE #( FOR wl_dest IN rl_user_email WHERE ( high = 'CC' ) ( sign = wl_dest-sign option = wl_dest-option low = wl_dest-low high = ''  ) )
      ).
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->ENVIAR_EMAIL_PENDENCIAS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NUMSOL                      TYPE        ZTAA_001-SOLICITACAO
* | [--->] IV_KOSTL_D                     TYPE        ZTAA_001-KOSTLD
* | [--->] IV_DIAS                        TYPE        NUM4
* | [--->] IV_SOLORI                      TYPE        ZTAA_001-SOLORI
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD enviar_email_pendencias.
    DATA:
      sl_msg         TYPE bapiret2,
      tl_corpo_email TYPE bcsy_text,
      wl_corpo_email LIKE LINE OF tl_corpo_email.

*   " Busca os responsÃ¡veis pelo centro de custo
    SELECT SINGLE verak_user
      INTO @DATA(vl_resp_centro)
      FROM csks
      WHERE kostl EQ @iv_kostl_d
        AND datbi EQ '99991231'.

    IF vl_resp_centro IS INITIAL.
      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = VALUE #( id = 'ZAA' number = 024 type = 'E' ). " ResponsÃ¡vel do centro de custo de destino nÃ£o identificado.
    ENDIF.

    DATA:
      sl_address TYPE bapiaddr3,
      tl_return  TYPE STANDARD TABLE OF bapiret2.

*************************************************************************************
*	  " Retorna o e-mail do responsÃ¡vel.
*************************************************************************************
    sl_address-e_mail = me->buscar_email( iv_uname = vl_resp_centro ).

***    CALL FUNCTION 'BAPI_USER_GET_DETAIL'
***      EXPORTING
***        username = vl_resp_centro
***      IMPORTING
***        address  = sl_address
***      TABLES
***        return   = tl_return.
***
***    IF tl_return[] IS NOT INITIAL.
***      READ TABLE tl_return INTO sl_msg WITH KEY type = 'E'.
***      IF sl_msg IS NOT INITIAL.
***        RAISE EXCEPTION TYPE cx_idm_error
***          EXPORTING
***            message = sl_msg.
***      ENDIF.
***    ENDIF.

*   " Encontra o e-mail do criador da solicitaÃ§Ã£o.
    DATA(vl_email_solori) = me->buscar_email( iv_pernr = iv_solori ).

***    SELECT SINGLE usrid_long
***      INTO @DATA(vl_email_solori)
***      FROM pa0105
***      WHERE pernr EQ @iv_solori
***        AND subty EQ '0010'
***        AND endda GE @sy-datum
***        AND begda LE @sy-datum.

*   " Busca o texto do e-mail
    DATA tl_lines TYPE STANDARD TABLE OF tline.
    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        id                      = 'ST'
        language                = 'P'
        name                    = 'ZAA_TRANSF_EMAIL_PENDENCIA'
        object                  = 'TEXT'
      TABLES
        lines                   = tl_lines
      EXCEPTIONS
        id                      = 1
        language                = 2
        name                    = 3
        not_found               = 4
        object                  = 5
        reference_check         = 6
        wrong_access_to_archive = 7
        OTHERS                  = 8.

    IF sy-subrc <> 0.
      sl_msg-type   = sy-msgty.
      sl_msg-id     = sy-msgid.
      sl_msg-number = sy-msgno.
      sl_msg-message_v1 = sy-msgv1.
      sl_msg-message_v2 = sy-msgv2.
      sl_msg-message_v3 = sy-msgv3.
      sl_msg-message_v4 = sy-msgv4.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.
    ENDIF.

    LOOP AT tl_lines ASSIGNING FIELD-SYMBOL(<fs_linha>).
      wl_corpo_email = <fs_linha>-tdline.

      IF wl_corpo_email CS '##NUMSOL##'.
        REPLACE '##NUMSOL##' WITH iv_numsol INTO wl_corpo_email.
      ENDIF.

      IF wl_corpo_email CS '##DIAS##'.
        REPLACE '##DIAS##' WITH iv_dias INTO wl_corpo_email.
      ENDIF.

      IF wl_corpo_email CS  '<(>,<)>'.
        REPLACE '<(>,<)>' WITH ',' INTO wl_corpo_email.
      ENDIF.

      APPEND wl_corpo_email TO tl_corpo_email.
    ENDLOOP.

*   " Efetiva o envio do e-mail.
    IF sl_address-e_mail IS NOT INITIAL.
      DATA(tl_destinatarios) = VALUE bcsy_smtpa( ( sl_address-e_mail ) ( vl_email_solori ) ).

      zcl_utilities=>enviar_email(
        EXPORTING
          iv_remetente_uname = sy-uname
*          iv_remetente       =
          iv_assunto         = |SolicitaÃ§Ã£o de TransferÃªncia { iv_numsol }|
          it_conteudo        = tl_corpo_email
          it_destinatarios   = tl_destinatarios   " BCS: tabela interna com endereÃ§os SMTP
      ).
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->ENVIAR_EMAIL_RECUSA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_IMOBILIZADO                 TYPE        ZTAA_001
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD enviar_email_recusa.
    DATA:
      sl_msg         TYPE bapiret2,
      vl_email_cc    TYPE ad_smtpadr,
      tl_corpo_email TYPE bcsy_text,
      wl_corpo_email LIKE LINE OF tl_corpo_email.

    DATA:
      sl_address TYPE bapiaddr3,
      tl_return  TYPE STANDARD TABLE OF bapiret2.

    sl_address-e_mail = me->buscar_email( iv_pernr = is_imobilizado-solori ).

***    SELECT SINGLE usrid
***      INTO @DATA(vl_usrid)
***      FROM pa0105
***      WHERE subty EQ '0001'
***        AND pernr EQ @is_imobilizado-solori
***        AND endda GE @sy-datum
***        AND begda LE @sy-datum.
***
***    DATA vl_username TYPE bapibname-bapibname.
***    vl_username = vl_usrid.
***
***    CALL FUNCTION 'BAPI_USER_GET_DETAIL'
***      EXPORTING
***        username = vl_username
***      IMPORTING
***        address  = sl_address
***      TABLES
***        return   = tl_return.
***
***    IF tl_return[] IS NOT INITIAL.
***      READ TABLE tl_return INTO sl_msg WITH KEY type = 'E'.
***      IF sl_msg IS NOT INITIAL.
***        RAISE EXCEPTION TYPE cx_idm_error
***          EXPORTING
***            message = sl_msg.
***      ENDIF.
***    ENDIF.

*************************************************************************************
*	  " Buscar e-mail do solicitante para envio de cÃ³pia
*************************************************************************************
    SELECT SINGLE solori
      INTO @DATA(vl_id_solicitante)
      FROM ztaa_001
      WHERE solicitacao EQ @is_imobilizado-solicitacao.


    IF vl_id_solicitante IS NOT INITIAL.
      vl_email_cc = me->buscar_email( iv_pernr = vl_id_solicitante ).

***      SELECT SINGLE usrid_long
***        INTO @DATA(vl_email_solicitante)
***        FROM pa0105
***        WHERE subty EQ '0010'
***          AND pernr EQ @vl_id_solicitante
***          AND endda GE @sy-datum
***          AND begda LE @sy-datum.
***
***      IF vl_email_solicitante IS INITIAL.
***        SELECT SINGLE usrid
***          INTO @DATA(vl_usrid_cc)
***          FROM pa0105
***          WHERE subty EQ '0001'
***            AND pernr EQ @vl_id_solicitante
***            AND endda GE @sy-datum
***            AND begda LE @sy-datum.
***
****        DATA vl_username TYPE bapibname-bapibname.
***        vl_username = vl_usrid_cc.
***
***        DATA:
***          sl_address_cc TYPE bapiaddr3.
***
***        CALL FUNCTION 'BAPI_USER_GET_DETAIL'
***          EXPORTING
***            username = vl_username
***          IMPORTING
***            address  = sl_address_cc
***          TABLES
***            return   = tl_return.
***
***        READ TABLE tl_return WITH KEY type = 'E' TRANSPORTING NO FIELDS.
***        IF sy-subrc EQ 0.
***          vl_email_cc = sl_address_cc-e_mail.
***        ENDIF.
***
***      ELSE.
***        vl_email_cc = vl_email_solicitante.
***      ENDIF.
    ENDIF.

*   " Busca o texto do e-mail
    DATA tl_lines TYPE STANDARD TABLE OF tline.
    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        id                      = 'ST'
        language                = 'P'
        name                    = 'ZAA_TRANSF_EMAIL_RECUSA'
        object                  = 'TEXT'
      TABLES
        lines                   = tl_lines
      EXCEPTIONS
        id                      = 1
        language                = 2
        name                    = 3
        not_found               = 4
        object                  = 5
        reference_check         = 6
        wrong_access_to_archive = 7
        OTHERS                  = 8.

    IF sy-subrc <> 0.
      sl_msg-type   = sy-msgty.
      sl_msg-id     = sy-msgid.
      sl_msg-number = sy-msgno.
      sl_msg-message_v1 = sy-msgv1.
      sl_msg-message_v2 = sy-msgv2.
      sl_msg-message_v3 = sy-msgv3.
      sl_msg-message_v4 = sy-msgv4.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.
    ENDIF.

    LOOP AT tl_lines ASSIGNING FIELD-SYMBOL(<fs_linha>).
      wl_corpo_email = <fs_linha>-tdline.

      IF wl_corpo_email CS '##NUMSOL##'.
        REPLACE '##NUMSOL##' WITH is_imobilizado-solicitacao INTO wl_corpo_email.
      ENDIF.

      IF wl_corpo_email CS  '<(>,<)>'.
        REPLACE '<(>,<)>' WITH ',' INTO wl_corpo_email.
      ENDIF.

      APPEND wl_corpo_email TO tl_corpo_email.
    ENDLOOP.

*   " Efetiva o envio do e-mail.
    IF sl_address-e_mail IS NOT INITIAL.
      zcl_utilities=>enviar_email(
        EXPORTING
          iv_remetente_uname = sy-uname
*          iv_remetente       =
          iv_assunto            = |SolicitaÃ§Ã£o de TransferÃªncia { is_imobilizado-solicitacao }|
          it_conteudo           = tl_corpo_email
          it_destinatarios      = VALUE bcsy_smtpa( ( sl_address-e_mail )  )   " BCS: tabela interna com endereÃ§os SMTP
          it_destinatarios_cc   = VALUE bcsy_smtpa( ( vl_email_cc )  )
      ).
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->ENVIAR_PARA_APROVACAO_FISCAL
* +-------------------------------------------------------------------------------------------------+
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD enviar_para_aprovacao_fiscal.
    me->verificar_dados( ).

    READ TABLE me->rg_werks_o INTO DATA(wl_werks) INDEX 1.
    me->vg_solic = me->montar_chave_solicitacao( iv_werks = wl_werks-low ).

    DATA:
      tl_texto_transf TYPE STANDARD TABLE OF ztaa_003,
      tl_ztaa_003     TYPE STANDARD TABLE OF ztaa_003,
      vl_txt_itm_id   TYPE ztaa_003-id_linha.

*   " Realiza a atualizaÃ§Ã£o dos campos carregados automaticamente no ALV.
    LOOP AT me->tg_lista_imob ASSIGNING FIELD-SYMBOL(<fs_lista_imob>).
      ADD 1 TO me->vg_item_base.
      vl_txt_itm_id = <fs_lista_imob>-txt_itm_id. " Inseri antes, pois os dados serÃ£o sobregravados abaixo.

      me->montar_imobilizado_transf(
        EXPORTING
          iv_anln1      = <fs_lista_imob>-anln1
          iv_anln2      = <fs_lista_imob>-anln2
        IMPORTING
          es_lista_imob = <fs_lista_imob>
      ).

*     " Vincula o imobilizado ao texto criado de acordo com o ID temporÃ¡rio.
      FREE tl_texto_transf.
      tl_texto_transf = VALUE #( FOR wl_textos IN me->tg_textos_imob WHERE ( txt_itm_id = vl_txt_itm_id )
      (
        bukrs       = <fs_lista_imob>-bukrs
        werks       = <fs_lista_imob>-werks
        gjahr       = <fs_lista_imob>-gjahr
        solicitacao = <fs_lista_imob>-solicitacao
        item        = <fs_lista_imob>-item
        id_linha    = wl_textos-id_linha
        texto       = wl_textos-texto
       ) ).

      APPEND LINES OF tl_texto_transf TO tl_ztaa_003.
    ENDLOOP.

*   " Vincula o texto da solicitaÃ§Ã£o a solicitaÃ§Ã£o sem ID temporÃ¡rio
    READ TABLE me->tg_lista_imob ASSIGNING <fs_lista_imob> INDEX 1.
    IF <fs_lista_imob> IS ASSIGNED.
      FREE tl_texto_transf.
      tl_texto_transf = VALUE #( FOR wl_textos IN me->tg_texto_sol
      (
        bukrs       = <fs_lista_imob>-bukrs
        werks       = <fs_lista_imob>-werks
        gjahr       = <fs_lista_imob>-gjahr
        solicitacao = <fs_lista_imob>-solicitacao
*        item        = NÃ£o possui item. Ã o Header.
        id_linha    = wl_textos-id_linha
        texto       = wl_textos-texto
       ) ).

      APPEND LINES OF tl_texto_transf TO tl_ztaa_003.
    ENDIF.

*   " Quando for uma transferencia interna, nÃ£o deve enviar e-mail.
    IF me->vg_transtp NE 02.
*     " Realiza o envio do e-mail ao fiscal responsÃ¡vel pela validaÃ§Ã£o da transferÃªncia.
      me->enviar_email_fiscal(
        EXPORTING
          iv_solic   = me->vg_solic
          iv_kostl_d = me->vg_kostl_d
      ).
    ENDIF.


    DATA tl_ztaa_001 TYPE STANDARD TABLE OF ztaa_001.
    tl_ztaa_001[] = CORRESPONDING #( me->tg_lista_imob[] ).

    SORT tl_ztaa_001 BY bukrs anln1 anln2.
    DELETE ADJACENT DUPLICATES FROM tl_ztaa_001 COMPARING bukrs anln1 anln2.

    SORT tl_ztaa_001 BY bukrs werks gjahr solicitacao item.
    MODIFY ztaa_001 FROM TABLE tl_ztaa_001.
    IF sy-subrc EQ 0.
      MODIFY ztaa_003 FROM TABLE tl_ztaa_003.

*     " Quando for transferÃªncia interna, envia automaticamente para ateste.
      IF me->vg_transtp EQ 02.
        TRY .
            me->aprovar_transferencia( it_imobilizados = me->tg_lista_imob ).
          CATCH cx_idm_error INTO DATA(ol_exc).
            ROLLBACK WORK.

            RAISE EXCEPTION TYPE cx_idm_error
              EXPORTING
                message  = ol_exc->message
                messages = ol_exc->messages.
        ENDTRY.

      ENDIF.

      COMMIT WORK.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->ENVIAR_RECUSA
* +-------------------------------------------------------------------------------------------------+
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD enviar_recusa.
    DATA:
      sl_msg           TYPE bapiret2,
      tl_imob_cancelar TYPE me->tt_lista_imob.

* " ApÃ³s conversa com o GildÃ¡zio, a seleÃ§Ã£o invividual de todos os itens se tornarÃ¡ obrigatÃ³ria
* "ao fiscal, no momento da AprovaÃ§Ã£o. EntÃ£o, nÃ£o serÃ¡ necessÃ¡rio buscar os itens selecionados.
*    me->og_alv_oo->get_selected_rows( IMPORTING  et_index_rows = DATA(tl_selected_rows) ).
*
*    IF tl_selected_rows[] IS INITIAL.
*      sl_msg-type = 'E'.
*      sl_msg-id = 'ZAA'.
*      sl_msg-number = 015. " Selecione ao menos uma linha.
*
*      RAISE EXCEPTION TYPE cx_idm_error
*        EXPORTING
*          message = sl_msg.
*    ENDIF.
*
***********************************************************************
**   " Verifica se as linhas selecionadas podem ser transferidas
***********************************************************************
*    LOOP AT tl_selected_rows ASSIGNING FIELD-SYMBOL(<fs_rows>).
*      READ TABLE me->tg_lista_imob INDEX <fs_rows>-index ASSIGNING FIELD-SYMBOL(<fs_lista_imob>).
*      IF <fs_lista_imob> IS ASSIGNED.
*        APPEND <fs_lista_imob> TO tl_imob_cancelar.
*      ENDIF.
*
*      UNASSIGN <fs_lista_imob>.
*    ENDLOOP.
*
*    me->recusar_transferencia( it_imobilizados = tl_imob_cancelar ).
    me->recusar_transferencia( it_imobilizados = me->tg_lista_imob ).

    COMMIT WORK.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->EXCLUIR_FUNCIONALIDADES
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_BLOQ                        TYPE        ABAP_BOOL(optional)
* | [<-()] RT_FUNCTIONS                   TYPE        UI_FUNCTIONS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD excluir_funcionalidades.
*   " RelatÃ³rio com todas as funÃ§Ãµes
    IF sy-cprog EQ 'ZAA_008'.
      RETURN.
    ENDIF.

    IF iv_bloq EQ abap_true.
      rt_functions = VALUE ui_functions( ( cl_gui_alv_grid=>mc_fc_excl_all ) ). "// Remove todas as funcionalidades.

      RETURN.
    ENDIF.

    rt_functions = VALUE ui_functions(
      ( cl_gui_alv_grid=>mc_fc_auf                     )
      ( cl_gui_alv_grid=>mc_fc_average                 )
      ( cl_gui_alv_grid=>mc_fc_back_classic            )
      ( cl_gui_alv_grid=>mc_fc_call_abc                )
      ( cl_gui_alv_grid=>mc_fc_call_chain              )
      ( cl_gui_alv_grid=>mc_fc_call_crbatch            )
      ( cl_gui_alv_grid=>mc_fc_call_crweb              )
      ( cl_gui_alv_grid=>mc_fc_call_lineitems          )
      ( cl_gui_alv_grid=>mc_fc_call_master_data        )
      ( cl_gui_alv_grid=>mc_fc_call_more               )
      ( cl_gui_alv_grid=>mc_fc_call_report             )
      ( cl_gui_alv_grid=>mc_fc_call_xint               )
      ( cl_gui_alv_grid=>mc_fc_call_xml_export         )
      ( cl_gui_alv_grid=>mc_fc_call_xxl                )
      ( cl_gui_alv_grid=>mc_fc_check                   )
      ( cl_gui_alv_grid=>mc_fc_col_invisible           )
      ( cl_gui_alv_grid=>mc_fc_col_optimize            )
      ( cl_gui_alv_grid=>mc_fc_count                   )
      ( cl_gui_alv_grid=>mc_fc_current_variant         )
      ( cl_gui_alv_grid=>mc_fc_data_save               )
      ( cl_gui_alv_grid=>mc_fc_delete_filter           )
      ( cl_gui_alv_grid=>mc_fc_detail                  )
*      ( cl_gui_alv_grid=>mc_fc_excl_all                ) // Remove todas as funcionalidades.
      ( cl_gui_alv_grid=>mc_fc_expcrdata               )
      ( cl_gui_alv_grid=>mc_fc_expcrdesig              )
      ( cl_gui_alv_grid=>mc_fc_expcrtempl              )
      ( cl_gui_alv_grid=>mc_fc_expmdb                  )
      ( cl_gui_alv_grid=>mc_fc_extend                  )
      ( cl_gui_alv_grid=>mc_fc_f4                      )
*      ( cl_gui_alv_grid=>mc_fc_filter                  )
      ( cl_gui_alv_grid=>mc_fc_fix_columns             )
      ( cl_gui_alv_grid=>mc_fc_graph                   )
      ( cl_gui_alv_grid=>mc_fc_help                    )
      ( cl_gui_alv_grid=>mc_fc_html                    )
      ( cl_gui_alv_grid=>mc_fc_info                    )
      ( cl_gui_alv_grid=>mc_fc_load_variant            )
      ( cl_gui_alv_grid=>mc_fc_loc_append_row          )
      ( cl_gui_alv_grid=>mc_fc_loc_copy                )
      ( cl_gui_alv_grid=>mc_fc_loc_copy_row            )
      ( cl_gui_alv_grid=>mc_fc_loc_cut                 )
      ( cl_gui_alv_grid=>mc_fc_loc_move_row            )
      ( cl_gui_alv_grid=>mc_fc_loc_paste               )
      ( cl_gui_alv_grid=>mc_fc_loc_paste_new_row       )
      ( cl_gui_alv_grid=>mc_fc_loc_undo                )
      ( cl_gui_alv_grid=>mc_fc_maintain_variant        )
      ( cl_gui_alv_grid=>mc_fc_maximum                 )
      ( cl_gui_alv_grid=>mc_fc_minimum                 )
      ( cl_gui_alv_grid=>mc_fc_pc_file                 )
      ( cl_gui_alv_grid=>mc_fc_print                   )
      ( cl_gui_alv_grid=>mc_fc_print_back              )
      ( cl_gui_alv_grid=>mc_fc_print_prev              )
      ( cl_gui_alv_grid=>mc_fc_refresh                 )
      ( cl_gui_alv_grid=>mc_fc_reprep                  )
      ( cl_gui_alv_grid=>mc_fc_save_variant            )
      ( cl_gui_alv_grid=>mc_fc_send                    )
      ( cl_gui_alv_grid=>mc_fc_separator               )
      ( cl_gui_alv_grid=>mc_fc_subtot                  )
      ( cl_gui_alv_grid=>mc_fc_sum                     )
      ( cl_gui_alv_grid=>mc_fc_to_office               )
      ( cl_gui_alv_grid=>mc_fc_to_rep_tree             )
      ( cl_gui_alv_grid=>mc_fc_unfix_columns           )
      ( cl_gui_alv_grid=>mc_fc_url_copy_to_clipboard   )
      ( cl_gui_alv_grid=>mc_fc_variant_admin           )
      ( cl_gui_alv_grid=>mc_fc_views                   )
      ( cl_gui_alv_grid=>mc_fc_view_crystal            )
      ( cl_gui_alv_grid=>mc_fc_view_excel              )
      ( cl_gui_alv_grid=>mc_fc_view_grid               )
      ( cl_gui_alv_grid=>mc_fc_view_lotus              )
      ( cl_gui_alv_grid=>mc_fc_word_processor          )
    ).

    IF sy-cprog EQ 'ZAA_006'. " Apenas para criaÃ§Ã£o de solicitaÃ§Ãµes
      APPEND cl_gui_alv_grid=>mc_fc_deselect_all TO rt_functions.
      APPEND cl_gui_alv_grid=>mc_fc_select_all TO rt_functions.

    ELSEIF sy-cprog EQ 'ZAA_004'." OR sy-cprog EQ 'ZAA_007'.
      APPEND cl_gui_alv_grid=>mc_fc_loc_delete_row TO rt_functions.
      APPEND cl_gui_alv_grid=>mc_fc_loc_insert_row TO rt_functions.
      APPEND cl_gui_alv_grid=>mc_fc_find      TO rt_functions.
      APPEND cl_gui_alv_grid=>mc_fc_find_more TO rt_functions.
      APPEND cl_gui_alv_grid=>mc_fc_sort      TO rt_functions.
      APPEND cl_gui_alv_grid=>mc_fc_sort_asc  TO rt_functions.
      APPEND cl_gui_alv_grid=>mc_fc_sort_dsc  TO rt_functions.
      APPEND cl_gui_alv_grid=>mc_fc_filter    TO rt_functions.
    ELSE.
      rt_functions = VALUE ui_functions( ( cl_gui_alv_grid=>mc_fc_excl_all ) ). "// Remove todas as funcionalidades.

    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->EXECUTAR_EVENTO_591408
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_CHECK                       TYPE        ABAP_BOOL(optional)
* | [--->] IT_IMOBILIZADOS                TYPE        TT_LISTA_IMOB(optional)
* | [--->] IS_IMOBILIZADO                 TYPE        TY_LISTA_IMOB(optional)
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD executar_evento_591408.
    DATA:
      tl_imobilizados TYPE tt_lista_imob.

    DATA:
      tl_contas TYPE tt_contas,
      wl_contas LIKE LINE OF tl_contas.

    IF is_imobilizado IS NOT INITIAL.
      APPEND is_imobilizado TO tl_imobilizados.
    ELSE.
      tl_imobilizados[] = it_imobilizados[].
    ENDIF.

*   Concatenar 1+ ANLA-KTOGR Exemplo: ANLA-KTOGR = 23110101 entÃ£o 123110101
    SELECT anln1, anln2, ktogr
      INTO TABLE @DATA(tl_ktorg)
      FROM anla
      FOR ALL ENTRIES IN @tl_imobilizados
      WHERE anln1 EQ @tl_imobilizados-anln1
        AND anln2 EQ @tl_imobilizados-anln2.

**********************************************************************
*   " CorreÃ§Ã£o do erro - INICIO
*   " Conta XXXXXXX XXXX nÃ£o permite contabilizaÃ§Ã£o direta
**********************************************************************
    tl_contas  = VALUE tt_contas(
                ( debito = '0899920201' credito = '0799920201' tipo = 'D' )
                ( debito = '0359020100' credito = '0123119905' tipo = 'O' )
                ( debito = '0899920202' credito = '0799920202' tipo = 'O' ) ).

    DATA wl_ktorg  LIKE LINE OF tl_ktorg.
    LOOP AT tl_imobilizados ASSIGNING FIELD-SYMBOL(<fs_imobilizados>).
      READ TABLE tl_ktorg INTO wl_ktorg WITH KEY anln1 = <fs_imobilizados>-anln1
                                                 anln2 = <fs_imobilizados>-anln2.
      IF wl_ktorg IS NOT INITIAL.
        wl_contas-debito = |01{ wl_ktorg-ktogr }|.
        wl_contas-credito = '0459020100'.
        wl_contas-tipo = 'D'.
        APPEND wl_contas TO tl_contas.
      ENDIF.
    ENDLOOP.

    SELECT saknr, mitkz
      FROM skb1
      INTO TABLE @DATA(tl_saknr_debito)
      FOR ALL ENTRIES IN @tl_contas
      WHERE saknr EQ @tl_contas-debito.

    SELECT saknr, mitkz
      FROM skb1
      INTO TABLE @DATA(tl_saknr_credito)
      FOR ALL ENTRIES IN @tl_contas
      WHERE saknr EQ @tl_contas-credito.

    LOOP AT tl_saknr_credito ASSIGNING FIELD-SYMBOL(<fs_saknr_credito>).
      IF <fs_saknr_credito>-saknr IS NOT INITIAL.
        UPDATE skb1
          SET mitkz = ''
        WHERE saknr = <fs_saknr_credito>-saknr.
      ENDIF.
    ENDLOOP.

**********************************************************************
*   " CorreÃ§Ã£o do erro - FIM
**********************************************************************
    TRY .
        LOOP AT tl_imobilizados ASSIGNING <fs_imobilizados>.
          READ TABLE tl_ktorg INTO wl_ktorg WITH KEY anln1 = <fs_imobilizados>-anln1
                                                     anln2 = <fs_imobilizados>-anln2.
***********************************************************************
*     " ExecuÃ§Ã£o do lanÃ§amento contÃ¡bil com as contas descritas abaixo
          " em que tipo O = Conta Origem e D = Conta Destino
***********************************************************************
          me->executar_lancamento_contabil(
            EXPORTING
              iv_check       = iv_check
              is_imobilizado = <fs_imobilizados>
              it_contas  = VALUE tt_contas(
                   ( debito = |01{ wl_ktorg-ktogr }| credito = '0459020100' tipo = 'D' )
                   ( debito = '0899920201' credito = '0799920201' tipo = 'D' )
                   ( debito = '0359020100' credito = '0123119905' tipo = 'O' )
                   ( debito = '0899920202' credito = '0799920202' tipo = 'O' ) ) ).
        ENDLOOP.

      CATCH cx_idm_error INTO DATA(ol_idm_error).
        LOOP AT tl_saknr_credito ASSIGNING <fs_saknr_credito>.
          IF <fs_saknr_credito>-saknr IS NOT INITIAL.
            UPDATE skb1
              SET mitkz = <fs_saknr_credito>-mitkz
            WHERE saknr = <fs_saknr_credito>-saknr.
          ENDIF.
        ENDLOOP.

        RAISE EXCEPTION TYPE cx_idm_error
          EXPORTING
            message  = ol_idm_error->message
            messages = ol_idm_error->messages.

    ENDTRY.

    LOOP AT tl_saknr_credito ASSIGNING <fs_saknr_credito>.
      IF <fs_saknr_credito>-saknr IS NOT INITIAL.
        UPDATE skb1
          SET mitkz = <fs_saknr_credito>-mitkz
        WHERE saknr = <fs_saknr_credito>-saknr.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->EXECUTAR_EVENTO_591409
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_CHECK                       TYPE        ABAP_BOOL(optional)
* | [--->] IT_IMOBILIZADOS                TYPE        TT_LISTA_IMOB
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD executar_evento_591409.
    DATA:
      tl_contas TYPE tt_contas,
      wl_contas LIKE LINE OF tl_contas.

*   Concatenar 1+ ANLA-KTOGR Exemplo: ANLA-KTOGR = 23110101 entÃ£o 123110101
    SELECT anln1, anln2, ktogr
      INTO TABLE @DATA(tl_ktorg)
      FROM anla
      FOR ALL ENTRIES IN @it_imobilizados
      WHERE anln1 EQ @it_imobilizados-anln1
        AND anln2 EQ @it_imobilizados-anln2.

**********************************************************************
*   " CorreÃ§Ã£o do erro - INICIO
*   " Conta XXXXXXX XXXX nÃ£o permite contabilizaÃ§Ã£o direta
**********************************************************************
    tl_contas  = VALUE tt_contas(
               ( debito = '0799920202' credito = '0899920202' tipo = 'O' )
               ( debito = '0799920201' credito = '0899920201' tipo = 'D' ) ).

    DATA wl_ktorg  LIKE LINE OF tl_ktorg.
    LOOP AT it_imobilizados ASSIGNING FIELD-SYMBOL(<fs_imobilizados>).
      READ TABLE tl_ktorg INTO wl_ktorg WITH KEY anln1 = <fs_imobilizados>-anln1
                                                 anln2 = <fs_imobilizados>-anln2.
      IF wl_ktorg IS NOT INITIAL.
        wl_contas-debito = '0123119905' .
        wl_contas-credito = |01{ wl_ktorg-ktogr }| .
        wl_contas-tipo = 'O'.
        APPEND wl_contas TO tl_contas.
      ENDIF.
    ENDLOOP.

    SELECT saknr, mitkz
      FROM skb1
      INTO TABLE @DATA(tl_saknr_debito)
      FOR ALL ENTRIES IN @tl_contas
      WHERE saknr EQ @tl_contas-debito.

    SELECT saknr, mitkz
      FROM skb1
      INTO TABLE @DATA(tl_saknr_credito)
      FOR ALL ENTRIES IN @tl_contas
      WHERE saknr EQ @tl_contas-credito.

    LOOP AT tl_saknr_credito ASSIGNING FIELD-SYMBOL(<fs_saknr_credito>).
      IF <fs_saknr_credito>-saknr IS NOT INITIAL.
        UPDATE skb1
          SET mitkz = ''
        WHERE saknr = <fs_saknr_credito>-saknr.
      ENDIF.
    ENDLOOP.

**********************************************************************
*   " CorreÃ§Ã£o do erro - FIM
**********************************************************************
    TRY .
        LOOP AT it_imobilizados ASSIGNING <fs_imobilizados>.
          READ TABLE tl_ktorg INTO wl_ktorg WITH KEY anln1 = <fs_imobilizados>-anln1
                                                     anln2 = <fs_imobilizados>-anln2.
***********************************************************************
*     " ExecuÃ§Ã£o do lanÃ§amento contÃ¡bil com as contas descritas abaixo
          " em que tipo O = Conta Origem e D = Conta Destino
***********************************************************************
          me->executar_lancamento_contabil(
            EXPORTING
              iv_check       = iv_check
              is_imobilizado = <fs_imobilizados>
              it_contas  = VALUE tt_contas(
                    ( debito = '0123119905' credito = |01{ wl_ktorg-ktogr }| tipo = 'O' )
                    ( debito = '0799920202' credito = '0899920202' tipo = 'O' )
                    ( debito = '0799920201' credito = '0899920201' tipo = 'D' ) ) ).
        ENDLOOP.

      CATCH cx_idm_error INTO DATA(ol_idm_error).
        LOOP AT tl_saknr_credito ASSIGNING <fs_saknr_credito>.
          IF <fs_saknr_credito>-saknr IS NOT INITIAL.
            UPDATE skb1
              SET mitkz = <fs_saknr_credito>-mitkz
            WHERE saknr = <fs_saknr_credito>-saknr.
          ENDIF.
        ENDLOOP.

        RAISE EXCEPTION TYPE cx_idm_error
          EXPORTING
            message  = ol_idm_error->message
            messages = ol_idm_error->messages.

    ENDTRY.

    LOOP AT tl_saknr_credito ASSIGNING <fs_saknr_credito>.
      IF <fs_saknr_credito>-saknr IS NOT INITIAL.
        UPDATE skb1
          SET mitkz = <fs_saknr_credito>-mitkz
        WHERE saknr = <fs_saknr_credito>-saknr.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->EXECUTAR_LANCAMENTO_CONTABIL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_CHECK                       TYPE        ABAP_BOOL(optional)
* | [--->] IS_IMOBILIZADO                 TYPE        TY_LISTA_IMOB
* | [--->] IT_CONTAS                      TYPE        TT_CONTAS
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD executar_lancamento_contabil.
    DATA:
      sl_documentheader TYPE bapiache09,
      tl_accountgl      TYPE STANDARD TABLE OF bapiacgl09,
      wl_accountgl      LIKE LINE OF tl_accountgl,
      tl_currencyamount TYPE STANDARD TABLE OF bapiaccr09,
      wl_currencyamount LIKE LINE OF tl_currencyamount,
      tl_return         TYPE STANDARD TABLE OF bapiret2,
      vl_obj_key        TYPE bapiache09-obj_key.

    sl_documentheader = VALUE #(
      username        = sy-uname
      header_txt      = |{ is_imobilizado-anln1 }/{ is_imobilizado-anln2 }|
      comp_code       = is_imobilizado-bukrs
      doc_date        = sy-datum
      pstng_date      = sy-datum
      ref_doc_no_long = is_imobilizado-solicitacao
    ).

    DATA vl_itemno_acc TYPE bapiacgl09-itemno_acc.
    LOOP AT it_contas ASSIGNING FIELD-SYMBOL(<fs_contas>).
      CLEAR: wl_accountgl, wl_currencyamount.

      wl_accountgl = VALUE #(
        comp_code  = is_imobilizado-bukrs
        item_text  = is_imobilizado-solicitacao
      ).

      wl_currencyamount = VALUE #(
        currency = 'BRL'
        currency_iso = 'BRL'
      ).

      CASE <fs_contas>-tipo.
        WHEN 'O'. " Origem
          wl_accountgl-plant      = is_imobilizado-werks.
*          wl_accountgl-costcenter = is_imobilizado-kostl.

        WHEN 'D'. " Destino
          wl_accountgl-plant      = is_imobilizado-werksd.
*          wl_accountgl-costcenter = is_imobilizado-kostld.

      ENDCASE.

**********************************************************************
*     " Realiza a inclusÃ£o da conta de CrÃ©dito
**********************************************************************
      IF <fs_contas>-credito IS NOT INITIAL.
        ADD 1 TO vl_itemno_acc. " preencher com um sequencial para cada item de documento ex: â1â

        wl_accountgl-itemno_acc = vl_itemno_acc.
        wl_accountgl-gl_account = <fs_contas>-credito.

        wl_currencyamount-itemno_acc = vl_itemno_acc.
        wl_currencyamount-amt_doccur = is_imobilizado-vr_contabil.

        APPEND wl_accountgl TO tl_accountgl.
        APPEND wl_currencyamount TO tl_currencyamount.
      ENDIF.

**********************************************************************
*     " Realiza a inclusÃ£o da conta de DÃ©bito
**********************************************************************
      IF <fs_contas>-debito IS NOT INITIAL.
        ADD 1 TO vl_itemno_acc. " preencher com um sequencial para cada item de documento ex: â1â

        wl_accountgl-itemno_acc = vl_itemno_acc.
        wl_accountgl-gl_account = <fs_contas>-debito.

        wl_currencyamount-itemno_acc = vl_itemno_acc.
        wl_currencyamount-amt_doccur = is_imobilizado-vr_contabil * ( - 1 ). " CrÃ©dito deve possuir valor negativo.

        APPEND wl_accountgl TO tl_accountgl.
        APPEND wl_currencyamount TO tl_currencyamount.
      ENDIF.

    ENDLOOP.

*    IF iv_check EQ abap_true.
*      CALL FUNCTION 'BAPI_ACC_DOCUMENT_CHECK'
*        EXPORTING
*          documentheader = sl_documentheader
*        TABLES
*          accountgl      = tl_accountgl
*          currencyamount = tl_currencyamount
*          return         = tl_return.
*
*    ELSE.
*      CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
*        EXPORTING
*          documentheader = sl_documentheader
*        IMPORTING
*          obj_key        = vl_obj_key
*        TABLES
*          accountgl      = tl_accountgl
*          currencyamount = tl_currencyamount
*          return         = tl_return.
*
*      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
*    ENDIF.

    READ TABLE tl_return WITH KEY type = 'E' INTO DATA(wl_return).
    IF sy-subrc EQ 0.
      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message  = wl_return
          messages = tl_return.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->EXECUTAR_REL_COMPLETO
* +-------------------------------------------------------------------------------------------------+
* | [--->] IR_SOLIC                       TYPE        TR_SOLIC(optional)
* | [--->] IR_BUKRS                       TYPE        TR_BUKRS(optional)
* | [--->] IR_PERNR                       TYPE        TR_PERNR(optional)
* | [--->] IR_TPTRA                       TYPE        TR_TRANSTP(optional)
* | [--->] IR_ANLN1                       TYPE        TR_ANLN1(optional)
* | [--->] IR_ANLN2                       TYPE        TR_ANLN2(optional)
* | [--->] IR_SOLORI                      TYPE        TR_SOLORI(optional)
* | [--->] IR_KOSTL                       TYPE        TR_KOSTL(optional)
* | [--->] IR_WERKS                       TYPE        TR_WERKS(optional)
* | [--->] IR_STORT                       TYPE        TR_STORT(optional)
* | [--->] IR_KOSTLD                      TYPE        TR_KOSTL(optional)
* | [--->] IR_WERKSD                      TYPE        TR_WERKS(optional)
* | [--->] IR_STORTD                      TYPE        TR_STORT(optional)
* | [--->] IR_BZDAT                       TYPE        TR_BZDAT(optional)
* | [--->] IR_STSHDR                      TYPE        TR_STSHDR(optional)
* | [--->] IR_CRDATE                      TYPE        TR_CRDATE(optional)
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD executar_rel_completo.
    DATA:
      sl_msg          TYPE bapiret2,
      tl_imobilizados TYPE me->tt_lista_imob.

    SELECT ztaa_001~bukrs, ztaa_001~werks, ztaa_001~gjahr, ztaa_001~solicitacao, ztaa_001~item, ztaa_001~crdate
         , ztaa_001~solori, ztaa_001~stshdr, ztaa_001~stsitm, ztaa_001~kostl, ztaa_001~stort, ztaa_001~transtp, ztaa_001~bzdat
         , ztaa_001~werksd, ztaa_001~kostld, ztaa_001~stortd, ztaa_001~pernr, ztaa_001~anln1, ztaa_001~anln2, ztaa_001~invnr
         , ztaa_001~ord41, ztaa_001~vr_contabil, ztaa_001~dtaprov, ztaa_001~aprov
         , txt1~ktext, txt2~ktext AS ktextd, t087t~ordtx
      INTO TABLE @DATA(tl_ztaa_001)
      FROM ztaa_001
        LEFT OUTER JOIN t499s AS txt1
          ON txt1~werks EQ ztaa_001~werks AND txt1~stand EQ ztaa_001~stort
        LEFT OUTER JOIN t499s AS txt2
          ON txt2~werks EQ ztaa_001~werksd AND txt2~stand EQ ztaa_001~stortd
        LEFT OUTER JOIN t087t ON t087t~ord4x EQ ztaa_001~ord41
                             AND t087t~spras EQ @sy-langu
                             AND t087t~ordnr EQ '1'
      WHERE ztaa_001~bukrs IN @ir_bukrs
        AND ztaa_001~solicitacao IN @ir_solic
        AND ztaa_001~pernr  IN @ir_pernr
        AND ztaa_001~transtp IN @ir_tptra
        AND ztaa_001~anln1  IN @ir_anln1
        AND ztaa_001~anln2  IN @ir_anln2
        AND ztaa_001~solori IN @ir_solori
        AND ztaa_001~kostl  IN @ir_kostl
        AND ztaa_001~werks  IN @ir_werks
        AND ztaa_001~stort  IN @ir_stort
        AND ztaa_001~kostld IN @ir_kostld
        AND ztaa_001~werksd IN @ir_werksd
        AND ztaa_001~stortd IN @ir_stortd
        AND ztaa_001~bzdat  IN @ir_bzdat
        AND ztaa_001~stshdr IN @ir_stshdr
        AND ztaa_001~crdate IN @ir_crdate.

    IF tl_ztaa_001[] IS INITIAL.
      sl_msg-type = 'E'.
      sl_msg-id = 'ZAA'.
      sl_msg-number = 013. " A consulta nÃ£o retornou dados.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.
    ENDIF.

    tl_imobilizados = CORRESPONDING #( tl_ztaa_001 ).

    me->buscar_dados_imobilizado(
      EXPORTING
        it_lista_imob = tl_imobilizados
      IMPORTING
        et_anla       = DATA(tl_anla)  ).

    LOOP AT tl_imobilizados ASSIGNING FIELD-SYMBOL(<fs_imobilizados>).
      READ TABLE tl_anla WITH KEY bukrs = <fs_imobilizados>-bukrs anln1 = <fs_imobilizados>-anln1 anln2 = <fs_imobilizados>-anln2 ASSIGNING FIELD-SYMBOL(<fs_anla>).
      IF <fs_anla> IS ASSIGNED.
        <fs_imobilizados> = CORRESPONDING #( BASE ( <fs_imobilizados> ) <fs_anla> ).
      ENDIF.

      UNASSIGN <fs_anla>.
      <fs_imobilizados>-txt_itm = icon_create_text.
      <fs_imobilizados>-txt_sol = icon_create_text.

      me->buscar_texto_dominio( EXPORTING iv_domain_name = 'ZDAA_STS_SOL_TRANSF' iv_value = <fs_imobilizados>-stshdr
                                IMPORTING ev_text = <fs_imobilizados>-stshdr_ddk ).

      me->buscar_texto_dominio( EXPORTING iv_domain_name = 'ZDAA_STS_ITM_SOL_TRANSF' iv_value = <fs_imobilizados>-stsitm
                                IMPORTING ev_text = <fs_imobilizados>-stsitm_ddk ).

      me->buscar_texto_dominio( EXPORTING iv_domain_name = 'ZDAA_TIPO_TRANSF' iv_value = <fs_imobilizados>-transtp
                                IMPORTING ev_text = <fs_imobilizados>-dcr_transtp ).

      APPEND <fs_imobilizados> TO me->tg_lista_imob.
    ENDLOOP.

    SELECT *
      INTO TABLE me->tg_textos_imob
      FROM ztaa_003
      FOR ALL ENTRIES IN me->tg_lista_imob
      WHERE bukrs       EQ me->tg_lista_imob-bukrs
        AND werks       EQ me->tg_lista_imob-werks
        AND gjahr       EQ me->tg_lista_imob-gjahr
        AND solicitacao EQ me->tg_lista_imob-solicitacao
        AND item        EQ me->tg_lista_imob-item.

    SELECT *
      INTO TABLE me->tg_texto_sol
      FROM ztaa_003
      FOR ALL ENTRIES IN me->tg_lista_imob
      WHERE bukrs       EQ me->tg_lista_imob-bukrs
        AND werks       EQ me->tg_lista_imob-werks
        AND gjahr       EQ me->tg_lista_imob-gjahr
        AND solicitacao EQ me->tg_lista_imob-solicitacao
        AND item        EQ 0000. " NÃ£o possui item! Significa que Ã© o header

    SORT me->tg_lista_imob BY bukrs werks gjahr solicitacao item.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->EXECUTAR_TRANSFERENCIA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_IMOBILIZADO                 TYPE        TY_LISTA_IMOB
* | [--->] IV_TEST                        TYPE        ABAP_BOOL(optional)
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD executar_transferencia.
    DATA:
      sl_key                TYPE bapi1022_key,
      sl_reference          TYPE bapi1022_reference,
      sl_generaldata        TYPE bapi1022_feglg001,
      sl_generaldatax       TYPE bapi1022_feglg001x,
      sl_timedependentdata  TYPE bapi1022_feglg003,
      sl_timedependentdatax TYPE bapi1022_feglg003x,
      sl_companycode        TYPE bapi1022_1-comp_code,
      vl_asset              TYPE bapi1022_1-assetmaino,
      vl_subnumber          TYPE bapi1022_1-assetsubno,
      sl_return             TYPE bapiret2,
      tl_return_all         TYPE STANDARD TABLE OF bapiret2.

    sl_key-companycode              = is_imobilizado-bukrs.
    sl_reference-companycode        = is_imobilizado-bukrs.
    sl_reference-asset              = is_imobilizado-anln1.
    sl_reference-subnumber          = is_imobilizado-anln2.
    sl_generaldata-assetclass       = is_imobilizado-anlkl.

    sl_timedependentdata-costcenter = is_imobilizado-kostld.
    sl_timedependentdata-plant      = is_imobilizado-werksd.
    sl_timedependentdata-location   = is_imobilizado-stortd.
    sl_timedependentdata-person_no  = is_imobilizado-pernr.

    sl_timedependentdatax-costcenter = sl_timedependentdatax-plant = sl_timedependentdatax-location = sl_generaldatax-assetclass = abap_true.
    sl_timedependentdatax-person_no = abap_true.
    CALL FUNCTION 'BAPI_FIXEDASSET_CREATE1'
      EXPORTING
        key                = sl_key
        reference          = sl_reference
        testrun            = iv_test
        generaldata        = sl_generaldata
        generaldatax       = sl_generaldatax
        timedependentdata  = sl_timedependentdata
        timedependentdatax = sl_timedependentdatax
      IMPORTING
        companycode        = sl_companycode
        asset              = vl_asset
        subnumber          = vl_subnumber
        return             = sl_return.

    IF sl_return-type EQ 'E' OR sl_return-type EQ 'A'.
      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_return.
    ENDIF.

*   " Caso esteja em modo de teste, deve sair, pois a BAPI abaixo nÃ£o possui modo de teste...
    IF iv_test EQ abap_true.
      RETURN.
    ENDIF.

    DATA:
      sl_generalpostingdata  TYPE bapifapo_gen_info,
      sl_transfertodata      TYPE bapifapo_transfer_to,
      sl_transferpostingdata TYPE bapifapo_transfer_rev_distr.

    sl_generalpostingdata-username = sy-uname.
*    sl_generalpostingdata-doc_type = sy-datum.
    sl_generalpostingdata-doc_date  = sy-datum.
    sl_generalpostingdata-pstng_date = sy-datum.
    sl_generalpostingdata-fis_period = 00.
    sl_generalpostingdata-trans_date = sy-datum.
    sl_generalpostingdata-comp_code  = is_imobilizado-bukrs.
    sl_generalpostingdata-assetmaino = is_imobilizado-anln1.
    sl_generalpostingdata-assetsubno = is_imobilizado-anln2.
    sl_transfertodata-part_comco     = is_imobilizado-bukrs.
    sl_transfertodata-part_asset     = vl_asset    .
    sl_transfertodata-part_subno     = vl_subnumber.
    sl_transferpostingdata-valuedate = sy-datum.

    CLEAR sl_return.
    FREE tl_return_all.

    CALL FUNCTION 'BAPI_ASSET_TRANSFER_CHECK'
      EXPORTING
        generalpostingdata  = sl_generalpostingdata
        transfertodata      = sl_transfertodata
        transferpostingdata = sl_transferpostingdata
      IMPORTING
        return              = sl_return
      TABLES
        return_all          = tl_return_all.

    IF sl_return-type EQ 'E' OR sl_return-type EQ 'A'.
      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message  = sl_return
          messages = tl_return_all.
    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
    ENDIF.

**********************************************************************
*   " Ao executar as BAPIS em sequencia, ocorre erro de LOCK de tabela.
*   " Deve verificar se jÃ¡ foi liberada antes de continuar a execuÃ§Ã£o.
**********************************************************************
    DO.
      CALL FUNCTION 'RA_ASSET_ENQUEUE'
        EXPORTING
          anln1                   = is_imobilizado-anln1
          anln2                   = is_imobilizado-anln2
          bukrs                   = is_imobilizado-bukrs
          i_flg_ignore_bukrs_lock = abap_true
        EXCEPTIONS
          anlage_gesperrt         = 1
          anlage_selbst_gesperrt  = 2
          bukrs_locked            = 3
          OTHERS                  = 4.

      IF sy-subrc EQ 0.
        CALL FUNCTION 'RA_ASSET_DEQUEUE'
          EXPORTING
            anln1 = is_imobilizado-anln1
            anln2 = is_imobilizado-anln2
            bukrs = is_imobilizado-bukrs.

        EXIT.
      ENDIF.
    ENDDO.

    CLEAR sl_return.
    FREE tl_return_all.

    CALL FUNCTION 'BAPI_ASSET_TRANSFER_POST'
      EXPORTING
        generalpostingdata  = sl_generalpostingdata
        transfertodata      = sl_transfertodata
        transferpostingdata = sl_transferpostingdata
      IMPORTING
        return              = sl_return
      TABLES
        return_all          = tl_return_all.

    IF sl_return-type EQ 'E' OR sl_return-type EQ 'A'.
      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message  = sl_return
          messages = tl_return_all.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->EXECUTAR_TRANSFERENCIA_INTERNA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_IMOBILIZADO                 TYPE        TY_LISTA_IMOB
* | [--->] IV_TEST                        TYPE        ABAP_BOOL(optional)
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD executar_transferencia_interna.
    DATA:
      vl_companycode        TYPE bapi1022_1-comp_code,
      vl_asset              TYPE bapi1022_1-assetmaino,
      vl_subnumber          TYPE bapi1022_1-assetsubno,
      sl_return             TYPE bapiret2,
      sl_generaldata        TYPE bapi1022_feglg001,
      sl_generaldatax       TYPE bapi1022_feglg001x,
      sl_timedependentdata  TYPE bapi1022_feglg003,
      sl_timedependentdatax TYPE bapi1022_feglg003x.

    vl_companycode = is_imobilizado-bukrs.
    vl_asset       = is_imobilizado-anln1.
    vl_subnumber   = is_imobilizado-anln2.

*    sl_generaldata-assetclass  = is_imobilizado-anlkl.
*    sl_generaldatax-assetclass = abap_true.

    sl_timedependentdata-costcenter = is_imobilizado-kostld.
    sl_timedependentdata-plant      = is_imobilizado-werksd.
    sl_timedependentdata-location   = is_imobilizado-stortd.
    sl_timedependentdata-person_no  = is_imobilizado-pernr.
    sl_timedependentdata-from_date  = sy-datum.

    sl_timedependentdatax-costcenter = sl_timedependentdatax-plant = sl_generaldatax-assetclass = abap_true.
    sl_timedependentdatax-person_no =  sl_timedependentdatax-location = sl_timedependentdatax-from_date = abap_true.

    CALL FUNCTION 'BAPI_FIXEDASSET_CHANGE'
      EXPORTING
        companycode        = vl_companycode
        asset              = vl_asset
        subnumber          = vl_subnumber
*       generaldata        = sl_generaldata
*       generaldatax       = sl_generaldatax
        timedependentdata  = sl_timedependentdata
        timedependentdatax = sl_timedependentdatax
      IMPORTING
        return             = sl_return.

    IF iv_test EQ abap_true OR sl_return-type EQ 'E'.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' .

      IF sl_return-type EQ 'E'.
        RAISE EXCEPTION TYPE cx_idm_error
          EXPORTING
            message = sl_return.
      ENDIF.
    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = abap_true.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->GERAR_ESTRUTURA_TELA
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RS_ZTAA_001                    TYPE        ZTAA_001
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD gerar_estrutura_tela.
    rs_ztaa_001-solicitacao = me->vg_solic.
    rs_ztaa_001-bukrs = me->vg_bukrs.

    READ TABLE me->rg_werks_o INTO DATA(wl_werks) INDEX 1.
    rs_ztaa_001-werks = wl_werks-low.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->GET_ACAO
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_ACAO                        TYPE        SY-UCOMM
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_acao.
    rv_acao = me->vg_acao.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->GET_DESC_KOSTL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_KOSTL                       TYPE        ZTAA_001-KOSTL
* | [<-()] RV_DESC                        TYPE        DYNPREAD-FIELDVALUE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_desc_kostl.
    SELECT SINGLE ktext
      INTO @DATA(vl_ktext)
      FROM cskt
      WHERE kostl EQ @iv_kostl
        AND spras EQ @sy-langu.

    rv_desc = vl_ktext.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->GET_DESC_PERNR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_PERNR                       TYPE        ZTAA_001-PERNR
* | [<-()] RV_DESC                        TYPE        DYNPREAD-FIELDVALUE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_desc_pernr.
    DATA vl_username TYPE bapibname-bapibname.
    SELECT SINGLE usrid
      INTO @DATA(vl_usr_sap)
      FROM pa0105
      WHERE pernr EQ @iv_pernr
        AND subty EQ '0001'
        AND endda GE @sy-datum
        AND begda LE @sy-datum.

    IF vl_usr_sap IS NOT INITIAL.
      vl_username = vl_usr_sap.

      DATA tl_return TYPE STANDARD TABLE OF bapiret2.
      DATA sl_address TYPE bapiaddr3.
      CALL FUNCTION 'BAPI_USER_GET_DETAIL'
        EXPORTING
          username = vl_username
        IMPORTING
          address  = sl_address
        TABLES
          return   = tl_return.

      CONCATENATE sl_address-firstname sl_address-lastname INTO rv_desc SEPARATED BY space.

    ENDIF.

    IF rv_desc IS INITIAL.
      SELECT SINGLE vorna, nachn
        INTO @DATA(sl_pa0002)
        FROM pa0002
        WHERE pernr EQ @iv_pernr
          AND endda GE @sy-datum
          AND begda LE @sy-datum.

      IF sl_pa0002 IS NOT INITIAL.
        CONCATENATE sl_pa0002-vorna sl_pa0002-nachn INTO rv_desc SEPARATED BY space.
      ENDIF.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->GET_DESC_STORT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_STORT                       TYPE        ZTAA_001-STORT
* | [--->] IV_WERKS                       TYPE        ZTAA_001-WERKS
* | [<-()] RV_DESC                        TYPE        DYNPREAD-FIELDVALUE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_desc_stort.
    SELECT SINGLE ktext
      INTO @DATA(vl_ktext)
      FROM t499s
      WHERE werks EQ @iv_werks
        AND stand EQ @iv_stort.

    rv_desc = vl_ktext.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->GET_DESC_TRANSTP
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_TRANSTP                     TYPE        ZTAA_001-TRANSTP
* | [<-()] RV_DESC                        TYPE        DYNPREAD-FIELDVALUE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_desc_transtp.
    me->buscar_texto_dominio(
      EXPORTING
        iv_domain_name = 'ZDAA_TIPO_TRANSF'
        iv_value       = iv_transtp
      IMPORTING
        ev_text = rv_desc
    ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->GET_DESC_WERKS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_WERKS                       TYPE        ZTAA_001-WERKS
* | [<-()] RV_DESC                        TYPE        DYNPREAD-FIELDVALUE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_desc_werks.
    SELECT SINGLE name1
      INTO @DATA(vl_name)
      FROM t001w
      WHERE werks EQ @iv_werks.

    rv_desc = vl_name.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->GET_LIST_IMOBILIZADOS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RT_LISTA_IMOB                  TYPE        ZCTAA_CTRL_TRANSF_BENS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_list_imobilizados.
    rt_lista_imob[] = CORRESPONDING #( me->tg_lista_imob[] ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->GET_SOL_NUM
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_SOLIC                       TYPE        ZTAA_001-SOLICITACAO
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_sol_num.
    rv_solic = me->vg_solic.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->HANDLE_BUTTON_CLICK
* +-------------------------------------------------------------------------------------------------+
* | [--->] ES_COL_ID                      LIKE
* | [--->] ES_ROW_NO                      LIKE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD handle_button_click.
    TRY .
        CASE es_col_id-fieldname.
          WHEN 'TXT_ITM'.
            IF ( sy-cprog EQ 'ZAA_006' AND sy-dynnr EQ '9001' ) " CriaÃ§Ã£o na inclusÃ£o de transferÃªncias.
            OR ( sy-cprog EQ 'ZAA_004' )  " Programa de Ateste
            OR ( sy-cprog EQ 'ZAA_007' ) . " Programa de AprovaÃ§Ã£o
              me->inserir_texto_linha( iv_linha = es_row_no-row_id ).
            ELSE.
              me->visualizar_texto_linha( iv_linha = es_row_no-row_id iv_col = es_col_id-fieldname ).
            ENDIF.

          WHEN 'TXT_SOL'.
            IF ( sy-cprog EQ 'ZAA_004' ) " Programa de Ateste
             OR ( sy-cprog EQ 'ZAA_007' ) . " Programa de AprovaÃ§Ã£o
              me->inserir_texto_sol( iv_linha = es_row_no-row_id ).

            ELSE.
              me->visualizar_texto_linha( iv_linha = es_row_no-row_id iv_col = es_col_id-fieldname ).
            ENDIF.

        ENDCASE.
      CATCH cx_idm_error INTO DATA(ol_idm_error).
        MESSAGE ID ol_idm_error->message-id TYPE 'S'
          NUMBER ol_idm_error->message-number
            WITH ol_idm_error->message-message_v1 ol_idm_error->message-message_v2 ol_idm_error->message-message_v3 ol_idm_error->message-message_v4
              DISPLAY LIKE ol_idm_error->message-type.
    ENDTRY.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->HANDLE_DATA_CHANGED
* +-------------------------------------------------------------------------------------------------+
* | [--->] ER_DATA_CHANGED                LIKE
* | [--->] E_UCOMM                        LIKE
* | [--->] E_ONF4                         LIKE
* | [--->] E_ONF4_BEFORE                  LIKE
* | [--->] E_ONF4_AFTER                   LIKE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD handle_data_changed.

    me->inserted_rows( CHANGING cr_data_changed = er_data_changed ).

    me->modified_rows( CHANGING cr_data_changed = er_data_changed ).

    me->deleted_rows( CHANGING cr_data_changed = er_data_changed ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->HANDLE_ONF4
* +-------------------------------------------------------------------------------------------------+
* | [--->] E_FIELDNAME                    LIKE
* | [--->] E_FIELDVALUE                   LIKE
* | [--->] ES_ROW_NO                      LIKE
* | [--->] ER_EVENT_DATA                  LIKE
* | [--->] ET_BAD_CELLS                   LIKE
* | [--->] E_DISPLAY                      LIKE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD handle_onf4.
    CASE e_fieldname.
      WHEN 'STSITM_DDK'.
        me->serach_help_itm_aprova(
          CHANGING
            er_event_data = er_event_data                 " Changing Data Container for Events
            es_row_no     = es_row_no                 " AtribuiÃ§Ã£o nÂº linhas a ID linhas
        ).

      WHEN 'ANLN1'.
        me->serach_help_anln1(
          CHANGING
            er_event_data = er_event_data                 " Changing Data Container for Events
            es_row_no     = es_row_no                 " AtribuiÃ§Ã£o nÂº linhas a ID linhas
        ).
      WHEN OTHERS.
    ENDCASE.

    er_event_data->m_event_handled = abap_true. "(to inform grid that f4 was handled manually)
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->HANDLE_PRINT_TOP_OF_PAGE
* +-------------------------------------------------------------------------------------------------+
* | [--->] TABLE_INDEX                    LIKE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD handle_print_top_of_page.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->HANDLE_TOP_OF_PAGE
* +-------------------------------------------------------------------------------------------------+
* | [--->] E_DYNDOC_ID                    LIKE
* | [--->] TABLE_INDEX                    LIKE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD handle_top_of_page.
    DATA: text          TYPE sdydo_text_element,
          background_id TYPE sdydo_key VALUE space.

    me->og_ref_doc->initialize_document( background_color = cl_dd_area=>col_background_level2 ).

    me->og_ref_doc->add_table(
      EXPORTING no_of_columns               = 1
                width                       = '100%'
                border = '0'
                cell_background_transparent = abap_false
      IMPORTING table                       = DATA(ol_table) ).

    ol_table->add_column( EXPORTING width = '100%' IMPORTING column  = DATA(ol_column) ).
    ol_table->set_column_style( EXPORTING col_no  = 1 sap_color = cl_dd_area=>list_key ).

    DATA vl_text TYPE sdydo_text_element.

    IF sy-cprog EQ 'ZAA_007'.
      vl_text = 'Aprovar TransferÃªncia de Imobilizados'.
    ELSE.
      vl_text = 'Ateste TransferÃªncia de Imobilizados'.
    ENDIF.

    ol_column->add_text(
      EXPORTING
        text         = vl_text
*        sap_color    = cl_dd_document=>list_positive
        sap_fontsize = cl_dd_document=>large
        sap_emphasis = cl_dd_area=>strong ).
*
    ol_column->new_line( ).
    ol_column->new_line( ).

    ol_column->add_text(
      EXPORTING
        text         = | UsuÃ¡rio: { sy-uname }| ).

    ol_column->new_line( ).

    ol_column->add_text(
      EXPORTING
        text         = | Data: { sy-datum+6(2) }/{ sy-datum+4(2) }/{ sy-datum(4) } | ).

    ol_column->new_line( ).
    ol_column->new_line( ).

    DATA(ol_html) = NEW cl_gui_html_viewer( parent = me->og_header_container ).

    me->og_ref_doc->html_control = ol_html.

    CALL FUNCTION 'REUSE_ALV_GRID_COMMENTARY_SET'
      EXPORTING
        document = me->og_ref_doc
        bottom   = space.

    me->og_ref_doc->merge_document( ).

    me->og_ref_doc->set_document_background( picture_id = background_id ).

    me->og_ref_doc->display_document( reuse_control = abap_true parent = me->og_header_container ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->HANDLE_USER_COMMAND
* +-------------------------------------------------------------------------------------------------+
* | [--->] E_UCOMM                        LIKE
* | [--->] SENDER                         LIKE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD handle_user_command.
* define local data
    DATA: lt_rows TYPE lvc_t_row,
          ls_row  TYPE lvc_s_row.

    CASE e_ucomm.
      WHEN 'INSERT_ROW'.

      WHEN 'DELETE_ROW'.

      WHEN 'COPY_ROW'.

      WHEN OTHERS.
        RETURN.
    ENDCASE.

*   Trigger PAI
    CALL METHOD cl_gui_cfw=>set_new_ok_code
      EXPORTING
        new_code = e_ucomm
*      IMPORTING
*       rc       =
      .

  ENDMETHOD.                    "user_command


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->INICIAR_BAL_LOG
* +-------------------------------------------------------------------------------------------------+
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD iniciar_bal_log.
    DATA:
      wl_log_struc       TYPE bal_s_log.

    wl_log_struc-extnumber  = me->c_extnumber_ballog.
    wl_log_struc-object     = me->c_obj_ballog .
    wl_log_struc-subobject  = me->c_subobj_ballog.
    wl_log_struc-aldate     = sy-datum.
    wl_log_struc-altime     = sy-uzeit.
    wl_log_struc-aluser     = sy-uname.
    wl_log_struc-altcode    = sy-tcode.
    wl_log_struc-alprog     = sy-cprog.

    TRY .
        me->og_bal_log = NEW zcl_bal_log(
            log_struc       = wl_log_struc
            adicional_struc = me->c_estrutura_ballog
        ).
      CATCH cx_oo_message.

        DATA wl_msg TYPE bapiret2.
        wl_msg-id = zcl_utilities=>c_classe_mensagem.
        wl_msg-number = 003. " Termo de Responsabilidade emitido com sucesso.
        wl_msg-message_v1 = me->c_obj_ballog.
        wl_msg-message_v2 = me->c_subobj_ballog.

        RAISE EXCEPTION TYPE cx_idm_error
          EXPORTING
            message = wl_msg.

    ENDTRY.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->INICIAR_ROTINA_EMAILS_AUTO
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_DIAS                        TYPE        NUM4
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD iniciar_rotina_emails_auto.
    DATA tl_solicitacoes_pendentes TYPE me->tt_lista_imob.
**********************************************************************
*   " E-mail de SolicitaÃ§Ãµes pendentes de aprovaÃ§Ã£o Fiscal
**********************************************************************
    TRY .
        me->buscar_lista_imob_pendentes( iv_status = '1' ).
        APPEND LINES OF me->tg_lista_imob TO tl_solicitacoes_pendentes.
      CATCH cx_idm_error. " NÃ£o deve tratar exceÃ§Ã£o neste caso.
    ENDTRY.

**********************************************************************
*   " E-mail de SolicitaÃ§Ãµes pendentes de Ateste de recebimento.
**********************************************************************
    TRY .
        me->buscar_lista_imob_pendentes( iv_status = '2' ).
        APPEND LINES OF me->tg_lista_imob TO tl_solicitacoes_pendentes.
      CATCH cx_idm_error. " NÃ£o deve tratar exceÃ§Ã£o neste caso.
    ENDTRY.

*   " Caso nÃ£o retorne nenhum dado.
    IF tl_solicitacoes_pendentes[] IS INITIAL.
      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = VALUE #( type = 'E' id = 'ZAA' number = 013 ). " A consulta nÃ£o retornou dados.
    ENDIF.

*   " Garante que enviarÃ¡ apenas um e-mail por solicitaÃ§Ã£o / centro de custo destino.
    SORT tl_solicitacoes_pendentes BY bukrs werks gjahr solicitacao kostld.
    DELETE ADJACENT DUPLICATES FROM tl_solicitacoes_pendentes COMPARING bukrs werks gjahr solicitacao kostld.

    DATA vg_dias_criacao TYPE sy-datum.
    vg_dias_criacao = sy-datum - iv_dias.

*   Remove as solicitaÃ§Ãµes pendentes a menos tempo do que o solicitado
    DELETE tl_solicitacoes_pendentes WHERE crdate GT vg_dias_criacao.

    DATA:
      vl_dias     TYPE num4,
      vl_dias_ret TYPE p.
    LOOP AT tl_solicitacoes_pendentes ASSIGNING FIELD-SYMBOL(<fs_pendencias>).
      vl_dias_ret = sy-datum - <fs_pendencias>-crdate.

*      CALL FUNCTION 'HR_GET_TIME_BETWEEN_DATES'
*        EXPORTING
*          beg_date       = <fs_pendencias>-crdate
*          end_date       = sy-datum
*        IMPORTING
*          days           = vl_dias_ret
*        EXCEPTIONS
*          invalid_period = 1
*          OTHERS         = 2.
*      IF sy-subrc <> 0.
*        CONTINUE.
*      ENDIF.

      vl_dias = vl_dias_ret.

      me->enviar_email_pendencias(
        EXPORTING
          iv_numsol  = <fs_pendencias>-solicitacao                 " SolicitaÃ§Ã£o transferÃªncia ativo imobilizado
          iv_kostl_d = <fs_pendencias>-kostld                 " Centro de custo destino
          iv_dias    = vl_dias
          iv_solori  = <fs_pendencias>-solori
      ).
    ENDLOOP.

    COMMIT WORK.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->INSERIR_TEXTO_LINHA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_LINHA                       TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD inserir_texto_linha.
    DATA:
      tl_lines       TYPE dms_tab_tdline,
      wl_textos_imob LIKE LINE OF me->tg_textos_imob.

    READ TABLE me->tg_lista_imob ASSIGNING FIELD-SYMBOL(<fs_lista_imob>) INDEX iv_linha.
    IF <fs_lista_imob> IS NOT ASSIGNED.
      RETURN.
    ENDIF.

**********************************************************************
*   " LÃª um texto em novas solicitaÃ§Ãµes de transferÃªncia .
**********************************************************************
    IF <fs_lista_imob>-solicitacao EQ me->c_sol_inicial.
      IF <fs_lista_imob>-txt_itm_id IS INITIAL.
        ADD 1 TO me->vg_txt_itm_id.
        <fs_lista_imob>-txt_itm_id = me->vg_txt_itm_id.
      ENDIF.

      FREE tl_lines.
      LOOP AT me->tg_textos_imob INTO wl_textos_imob WHERE txt_itm_id = <fs_lista_imob>-txt_itm_id.
        APPEND wl_textos_imob-texto TO tl_lines.
      ENDLOOP.

    ELSE.
**********************************************************************
*   " LÃª um texto em solicitaÃ§Ãµes jÃ¡ existentes
**********************************************************************

      FREE tl_lines.
      LOOP AT me->tg_textos_imob INTO wl_textos_imob WHERE solicitacao = <fs_lista_imob>-solicitacao.
        APPEND wl_textos_imob-texto TO tl_lines.
      ENDLOOP.
    ENDIF.

    CALL FUNCTION 'ZMFAA_TEXT_EDIT' "'TERM_CONTROL_EDIT'
      EXPORTING
        titel          = 'Texto descritivo'
        langu          = sy-langu
*       iv_display     = abap_true
      TABLES
        textlines      = tl_lines
      EXCEPTIONS
        user_cancelled = 1
        OTHERS         = 2.

    IF sy-subrc EQ 0.
**********************************************************************
*     " Insere um texto em novas solicitaÃ§Ãµes de transferÃªncia .
**********************************************************************
      IF <fs_lista_imob>-solicitacao EQ me->c_sol_inicial.
        DELETE me->tg_textos_imob WHERE txt_itm_id = <fs_lista_imob>-txt_itm_id.

      ELSE.
**********************************************************************
*     " Insere um texto em solicitaÃ§Ãµes jÃ¡ existentes
**********************************************************************
        DELETE me->tg_textos_imob WHERE solicitacao = <fs_lista_imob>-solicitacao.
      ENDIF.

      LOOP AT tl_lines ASSIGNING FIELD-SYMBOL(<fs_lines>).
        CLEAR wl_textos_imob-texto.

        ADD 1 TO wl_textos_imob-id_linha.
        wl_textos_imob-txt_itm_id = <fs_lista_imob>-txt_itm_id.
        wl_textos_imob-solicitacao = <fs_lista_imob>-solicitacao.
        wl_textos_imob-texto = <fs_lines>.
        APPEND wl_textos_imob TO me->tg_textos_imob.
      ENDLOOP.
    ENDIF.

*    IF <fs_lista_imob>-txt_itm_id IS INITIAL.
*      ADD 1 TO me->vg_txt_itm_id.
*      <fs_lista_imob>-txt_itm_id = me->vg_txt_itm_id.
*    ENDIF.
*
*    FREE tl_lines.
*    LOOP AT me->tg_textos_imob INTO wl_textos_imob WHERE txt_itm_id = <fs_lista_imob>-txt_itm_id.
*      APPEND wl_textos_imob-texto TO tl_lines.
*    ENDLOOP.
*
*    CALL FUNCTION 'ZMFAA_TEXT_EDIT' "'TERM_CONTROL_EDIT'
*      EXPORTING
*        titel          = 'Texto descritivo'
*        langu          = sy-langu
**       iv_display     = abap_true
*      TABLES
*        textlines      = tl_lines
*      EXCEPTIONS
*        user_cancelled = 1
*        OTHERS         = 2.
*
*    DELETE me->tg_textos_imob WHERE txt_itm_id = <fs_lista_imob>-txt_itm_id.
*    LOOP AT tl_lines ASSIGNING FIELD-SYMBOL(<fs_lines>).
*      CLEAR wl_textos_imob-texto.
*
*      ADD 1 TO wl_textos_imob-id_linha.
*      wl_textos_imob-txt_itm_id = <fs_lista_imob>-txt_itm_id.
*      wl_textos_imob-texto = <fs_lines>.
*      APPEND wl_textos_imob TO me->tg_textos_imob.
*    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->INSERIR_TEXTO_SOL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_LINHA                       TYPE        I(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD inserir_texto_sol.
    DATA:
      tl_lines       TYPE dms_tab_tdline,
      wl_texto_sol   LIKE LINE OF  me->tg_texto_sol,
      vl_solicitacao TYPE ztaa_001-solicitacao.

**********************************************************************
*   " Os textos de solicitaÃ§Ãµes, podem vir da tela ou do ALV.
*   " Quando vier com iv_linha preenchido, vem do ALV.
**********************************************************************
    IF iv_linha IS NOT INITIAL.
      READ TABLE me->tg_lista_imob ASSIGNING FIELD-SYMBOL(<fs_lista_imob>) INDEX iv_linha.
      IF <fs_lista_imob> IS NOT ASSIGNED.
        RETURN.
      ENDIF.

      vl_solicitacao = <fs_lista_imob>-solicitacao.

      FREE tl_lines.
      tl_lines = VALUE #( FOR wl_for_texto_sol IN me->tg_texto_sol WHERE ( solicitacao = vl_solicitacao ) ( wl_for_texto_sol-texto )  ).

    ELSE.
      tl_lines = VALUE #( FOR wl_for_texto_sol IN me->tg_texto_sol ( wl_for_texto_sol-texto ) ).

    ENDIF.

    CALL FUNCTION 'ZMFAA_TEXT_EDIT'
      EXPORTING
        titel          = 'Texto descritivo'
        langu          = sy-langu
*       iv_display     = abap_true
      TABLES
        textlines      = tl_lines
      EXCEPTIONS
        user_cancelled = 1
        OTHERS         = 2.

    IF sy-subrc EQ 0.

**********************************************************************
*   " Insere um texto em solicitaÃ§Ãµes jÃ¡ existentes
**********************************************************************
      IF iv_linha IS NOT INITIAL.
        DELETE me->tg_texto_sol WHERE solicitacao = vl_solicitacao.

      ELSE.
**********************************************************************
*   " Insere um texto em novas solicitaÃ§Ãµes de transferÃªncia .
**********************************************************************

        FREE me->tg_texto_sol.
      ENDIF.

      LOOP AT tl_lines ASSIGNING FIELD-SYMBOL(<fs_lines>).
        CLEAR wl_texto_sol-texto.

        ADD 1 TO wl_texto_sol-id_linha.
        wl_texto_sol-solicitacao = vl_solicitacao.
        wl_texto_sol-texto = <fs_lines>.
        APPEND wl_texto_sol TO  me->tg_texto_sol.
      ENDLOOP.

    ENDIF.

*    tl_lines = VALUE #( FOR wl_for_texto_sol IN me->tg_texto_sol ( wl_for_texto_sol-texto ) ).
*
*    CALL FUNCTION 'ZMFAA_TEXT_EDIT' "'TERM_CONTROL_EDIT'
*      EXPORTING
*        titel          = 'Texto descritivo'
*        langu          = sy-langu
**       iv_display     = abap_true
*      TABLES
*        textlines      = tl_lines
*      EXCEPTIONS
*        user_cancelled = 1
*        OTHERS         = 2.
*    IF sy-subrc EQ 0.
*      FREE me->tg_texto_sol.
*      LOOP AT tl_lines ASSIGNING FIELD-SYMBOL(<fs_lines>).
*        CLEAR wl_texto_sol-texto.
*
*        ADD 1 TO wl_texto_sol-id_linha.
*        wl_texto_sol-texto = <fs_lines>.
*        APPEND wl_texto_sol TO  me->tg_texto_sol.
*      ENDLOOP.
*    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->INSERTED_ROWS
* +-------------------------------------------------------------------------------------------------+
* | [<-->] CR_DATA_CHANGED                TYPE REF TO CL_ALV_CHANGED_DATA_PROTOCOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD inserted_rows.
    FIELD-SYMBOLS <ft_data> TYPE me->tt_lista_imob. "zctaa_ctrl_transf_bens.
    ASSIGN cr_data_changed->mp_mod_rows->* TO <ft_data>.

    READ TABLE me->rg_werks_o INTO DATA(wl_werks) INDEX 1.

    LOOP AT cr_data_changed->mt_inserted_rows ASSIGNING FIELD-SYMBOL(<inserted_rows>).
      READ TABLE <ft_data> ASSIGNING FIELD-SYMBOL(<fs_inserted>) INDEX sy-tabix. "INDEX <inserted_rows>-row_id.
      IF <fs_inserted> IS ASSIGNED.
        <fs_inserted>-bukrs = me->vg_bukrs.
        <fs_inserted>-werks = wl_werks-low.
        <fs_inserted>-txt_itm = icon_create_text.
      ENDIF.
      UNASSIGN <fs_inserted>.
    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->LIMPAR_CACHE_ALV
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD limpar_cache_alv.
    cl_gui_cfw=>flush( ).

    me->og_container->finalize( ).
    me->og_container->free( ).
    FREE me->og_container.

    me->og_alv_oo->finalize( ).
*    me->og_alv_oo->free( ).
    FREE me->og_alv_oo.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->MODIFIED_ROWS
* +-------------------------------------------------------------------------------------------------+
* | [<-->] CR_DATA_CHANGED                TYPE REF TO CL_ALV_CHANGED_DATA_PROTOCOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD modified_rows.
    FIELD-SYMBOLS:
      <campo>   TYPE any.

**********************************************************************
*   " Ajusta os campos na tabela global do relatÃ³rio.
**********************************************************************
    LOOP AT cr_data_changed->mt_good_cells ASSIGNING FIELD-SYMBOL(<good_cells>).
      READ TABLE me->tg_lista_imob ASSIGNING FIELD-SYMBOL(<fs_modified>) INDEX <good_cells>-row_id.
      IF <fs_modified> IS ASSIGNED.
        ASSIGN COMPONENT <good_cells>-fieldname OF STRUCTURE <fs_modified> TO <campo>.
        IF <campo> IS ASSIGNED.
          <campo> = <good_cells>-value.
        ENDIF.
      ENDIF.

      UNASSIGN: <fs_modified>, <campo>.
    ENDLOOP.

**********************************************************************
*   " Ajusta as colunas que nÃ£o sÃ£o editÃ¡veis
**********************************************************************
    LOOP AT cr_data_changed->mt_good_cells ASSIGNING <good_cells>.
      IF NOT ( <good_cells>-fieldname EQ 'ANLN1' OR <good_cells>-fieldname EQ 'ANLN2' )
         OR <good_cells>-value IS INITIAL.
        CONTINUE.
      ENDIF.

      READ TABLE me->tg_lista_imob ASSIGNING <fs_modified> INDEX <good_cells>-row_id.
      IF <fs_modified> IS ASSIGNED.
        TRY .
            me->montar_imobilizado_transf(
              EXPORTING
                iv_anln1      = <fs_modified>-anln1
                iv_anln2      = <fs_modified>-anln2
              IMPORTING
                es_lista_imob = <fs_modified> ).

            LOOP AT cr_data_changed->mt_fieldcatalog ASSIGNING FIELD-SYMBOL(<fieldcat>).
*             " Modifica apenas os campos que nÃ£o foram modificados automaticamente. Normalmente serÃ£o os campos nÃ£o editÃ¡veis
              READ TABLE cr_data_changed->mt_good_cells WITH KEY row_id = <good_cells>-row_id fieldname = <fieldcat>-fieldname TRANSPORTING NO FIELDS.
              IF sy-subrc NE 0.
                ASSIGN COMPONENT <fieldcat>-fieldname OF STRUCTURE <fs_modified> TO <campo>.
                IF <campo> IS ASSIGNED.
                  cr_data_changed->modify_cell(
                    EXPORTING i_row_id    = <good_cells>-row_id
                              i_fieldname = <fieldcat>-fieldname
                              i_value     = <campo> ).
                ENDIF.
                UNASSIGN <campo>.

              ENDIF.
            ENDLOOP.

          CATCH cx_idm_error INTO DATA(ol_sel_error).
            MESSAGE ID ol_sel_error->message-id TYPE 'S'
              NUMBER ol_sel_error->message-number
                WITH ol_sel_error->message-message_v1 ol_sel_error->message-message_v2 ol_sel_error->message-message_v3 ol_sel_error->message-message_v4
                  DISPLAY LIKE ol_sel_error->message-type.
        ENDTRY.

      ENDIF.
      UNASSIGN <fs_modified>.
    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->MONTAR_CAMPOS_EDITAVEIS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RT_CELLTAB                     TYPE        LVC_T_STYL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD montar_campos_editaveis.
    DATA wl_celltab LIKE LINE OF rt_celltab.
    DATA(tl_fieldcat) = me->montar_fieldcat_9001( ).

    SORT tl_fieldcat BY fieldname.

    LOOP AT tl_fieldcat ASSIGNING FIELD-SYMBOL(<fs_fieldcat>).
      CASE <fs_fieldcat>-fieldname.
        WHEN 'ANLN1'.
          wl_celltab-style = cl_gui_alv_grid=>mc_style_enabled.
          wl_celltab-fieldname = <fs_fieldcat>-fieldname.
        WHEN OTHERS.
          wl_celltab-style = cl_gui_alv_grid=>mc_style_disabled.
          wl_celltab-fieldname = <fs_fieldcat>-fieldname.
      ENDCASE.

      APPEND wl_celltab TO rt_celltab.
    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->MONTAR_CHAVE_SOLICITACAO
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_WERKS                       TYPE        ZTAA_001-WERKS
* | [<-()] RV_SOLICITACAO                 TYPE        ZTAA_001-SOLICITACAO
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD montar_chave_solicitacao.
    DATA:
      vl_ano    TYPE inri-toyear,
      vl_numero TYPE n LENGTH 6.

    vl_ano = sy-datum(4).

    READ TABLE me->rg_werks_o INTO DATA(wl_werks) INDEX 1.

    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        nr_range_nr             = '01'
        object                  = 'ZAA_001'
        subobject               = wl_werks-low
        toyear                  = vl_ano
      IMPORTING
        number                  = vl_numero
      EXCEPTIONS
        interval_not_found      = 1
        number_range_not_intern = 2
        object_not_found        = 3
        quantity_is_0           = 4
        quantity_is_not_1       = 5
        interval_overflow       = 6
        buffer_overflow         = 7
        OTHERS                  = 8.
    IF sy-subrc <> 0.
      DATA sl_msg TYPE bapiret2.
      sl_msg-type   = sy-msgty.
      sl_msg-id     = sy-msgid.
      sl_msg-number = sy-msgno.
      sl_msg-message_v1 = sy-msgv1.
      sl_msg-message_v2 = sy-msgv2.
      sl_msg-message_v3 = sy-msgv3.
      sl_msg-message_v4 = sy-msgv4.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.
    ENDIF.

*   " 2018/1001-000001
    CONCATENATE sy-datum(4) '/' iv_werks '-' vl_numero INTO rv_solicitacao.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->MONTAR_FIELDCAT_9001
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RT_FIELDCAT                    TYPE        LVC_T_FCAT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD montar_fieldcat_9001.
    DATA(tl_fieldcat) = me->buscar_informacoes_estr( iv_estrutura = 'ZTAA_001' ).
    LOOP AT tl_fieldcat ASSIGNING FIELD-SYMBOL(<fs_fieldcat>).
      CASE <fs_fieldcat>-fieldname.
        WHEN 'ANLN1'.
          <fs_fieldcat>-col_pos = '1'.
          <fs_fieldcat>-edit = abap_true.
          <fs_fieldcat>-f4availabl = abap_true.
          CLEAR: <fs_fieldcat>-ref_table.
          APPEND <fs_fieldcat> TO rt_fieldcat.
        WHEN 'ANLN2'.
          <fs_fieldcat>-col_pos = '2'.
          <fs_fieldcat>-edit = abap_true.
          APPEND <fs_fieldcat> TO rt_fieldcat.
        WHEN 'CRDATE'.
          <fs_fieldcat>-col_pos = '3'.
          <fs_fieldcat>-edit = abap_false.
          APPEND <fs_fieldcat> TO rt_fieldcat.
        WHEN 'VR_CONTABIL'.
          <fs_fieldcat>-col_pos = '5'.
          <fs_fieldcat>-edit = abap_false.
          APPEND <fs_fieldcat> TO rt_fieldcat.
*          <fs_fieldcat>-fieldname = 'VR_AQUIS'.
        WHEN 'BUKRS' OR 'WERKS'.
          <fs_fieldcat>-no_out = abap_true.
          APPEND <fs_fieldcat> TO rt_fieldcat.
        WHEN OTHERS.
      ENDCASE.
    ENDLOOP.

    FREE tl_fieldcat.
    tl_fieldcat = me->buscar_informacoes_estr( iv_estrutura = 'ANLA' ).
    READ TABLE tl_fieldcat WITH KEY fieldname = 'TXT50' ASSIGNING <fs_fieldcat>.
    IF <fs_fieldcat> IS ASSIGNED.
      <fs_fieldcat>-col_pos = '4'.
      <fs_fieldcat>-edit = abap_false.
*      <fs_fieldcat>-auto_value = abap_true.
*      <fs_fieldcat>-valexi = abap_true.
      APPEND <fs_fieldcat> TO rt_fieldcat.
    ENDIF.

**********************************************************************
*   " InclusÃ£o do botÃ£o na linha do ALV
**********************************************************************
    DATA wl_fieldcat LIKE LINE OF rt_fieldcat.
    wl_fieldcat-fieldname = 'TXT_ITM'.
    wl_fieldcat-col_pos = '30'.
    wl_fieldcat-domname = 'ICON'.
    wl_fieldcat-ref_table = space.
    wl_fieldcat-dd_outlen = <fs_fieldcat>-intlen = 5.
    wl_fieldcat-style = cl_gui_alv_grid=>mc_style_button.
    wl_fieldcat-tooltip = 'Inserir texto descritivo - Item'.
    APPEND wl_fieldcat TO rt_fieldcat.

    wl_fieldcat-fieldname = 'TXT_ITM_ID'.
    wl_fieldcat-col_pos = '31'.
    wl_fieldcat-domname = 'NUM06'.
    wl_fieldcat-ref_table = space.
    wl_fieldcat-dd_outlen = <fs_fieldcat>-intlen = 5.
    wl_fieldcat-no_out = abap_true.
    APPEND wl_fieldcat TO rt_fieldcat.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->MONTAR_FIELDCAT_9002
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RT_FIELDCAT                    TYPE        LVC_T_FCAT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD montar_fieldcat_9002.
    DATA vl_colpos TYPE lvc_s_fcat-col_pos.
    DATA(tl_fieldcat) = me->buscar_informacoes_estr( iv_estrutura = 'ZTAA_001' ).
    DATA(tl_fc_anln1) = me->buscar_informacoes_estr( iv_estrutura = 'ANLA' ).
    DATA(tl_fc_t087t) = me->buscar_informacoes_estr( iv_estrutura = 'T087T' ).

    LOOP AT tl_fieldcat INTO DATA(wl_fieldcat).
      ADD 1 TO vl_colpos.
      wl_fieldcat-col_pos = vl_colpos.

      CASE wl_fieldcat-fieldname.
        WHEN 'STSHDR'.
          wl_fieldcat-no_out = abap_true.
        WHEN 'STSITM'.
          wl_fieldcat-no_out = abap_true.
      ENDCASE.

      APPEND wl_fieldcat TO rt_fieldcat.

      CASE wl_fieldcat-fieldname.
        WHEN 'STSHDR'.
          CLEAR wl_fieldcat.
          ADD 1 TO vl_colpos.

          wl_fieldcat-col_pos = vl_colpos.
          wl_fieldcat-fieldname = 'STSHDR_DDK'.
          wl_fieldcat-domname = 'ZDAA_STSOL_DESC'.
          wl_fieldcat-ref_table = space.
          wl_fieldcat-dd_outlen = wl_fieldcat-intlen = 15.
          wl_fieldcat-tooltip = 'Status da solicitaÃ§Ã£o'.
          wl_fieldcat-scrtext_l = 'Status da solicitaÃ§Ã£o'.
          wl_fieldcat-scrtext_m = 'Status da solicitaÃ§Ã£o'.
          wl_fieldcat-scrtext_s = 'StatusSol'.
*    wl_fieldcat-drdn_hndl = '2'.
          wl_fieldcat-lowercase = abap_true.
          APPEND wl_fieldcat TO rt_fieldcat.

        WHEN 'STSITM'.
          CLEAR wl_fieldcat.
          ADD 1 TO vl_colpos.

          wl_fieldcat-col_pos = vl_colpos.
          wl_fieldcat-fieldname = 'STSITM_DDK'.
          wl_fieldcat-domname = 'ZDAA_STSOL_DESC'.
          wl_fieldcat-ref_table = space.
          wl_fieldcat-dd_outlen = wl_fieldcat-intlen = 15.
          wl_fieldcat-tooltip = 'Status do Item'.
          wl_fieldcat-scrtext_l = 'Status do Item'.
          wl_fieldcat-scrtext_m = 'Status do Item'.
          wl_fieldcat-scrtext_s = 'StatusItm'.
          wl_fieldcat-lowercase = abap_true.
          APPEND wl_fieldcat TO rt_fieldcat.

        WHEN 'STORT'.
          CLEAR wl_fieldcat.
          ADD 1 TO vl_colpos.

          wl_fieldcat-col_pos = vl_colpos.
          wl_fieldcat-fieldname = 'KTEXT'.
          wl_fieldcat-domname = 'TEXT40'.
          wl_fieldcat-ref_table = space.
          wl_fieldcat-dd_outlen = wl_fieldcat-intlen = 15.
          wl_fieldcat-tooltip = 'LocalizaÃ§Ã£o origem'.
          wl_fieldcat-scrtext_l = 'LocalizaÃ§Ã£o origem'.
          wl_fieldcat-scrtext_m = 'LocalizaÃ§Ã£o origem'.
          wl_fieldcat-scrtext_s = 'LocalizaÃ§Ã£o origem'.
          wl_fieldcat-lowercase = abap_true.
          APPEND wl_fieldcat TO rt_fieldcat.

        WHEN 'STORTD'.
          CLEAR wl_fieldcat.
          ADD 1 TO vl_colpos.

          wl_fieldcat-col_pos = vl_colpos.
          wl_fieldcat-fieldname = 'KTEXTD'.
          wl_fieldcat-domname = 'TEXT40'.
          wl_fieldcat-ref_table = space.
          wl_fieldcat-dd_outlen = wl_fieldcat-intlen = 15.
          wl_fieldcat-tooltip = 'LocalizaÃ§Ã£o Destino'.
          wl_fieldcat-scrtext_l = 'LocalizaÃ§Ã£o Destino'.
          wl_fieldcat-scrtext_m = 'LocalizaÃ§Ã£o Destino'.
          wl_fieldcat-scrtext_s = 'LocalizaÃ§Ã£o Destino'.
          wl_fieldcat-lowercase = abap_true.
          APPEND wl_fieldcat TO rt_fieldcat.

        WHEN 'ANLN2'.
          READ TABLE tl_fc_anln1 WITH KEY fieldname = 'TXT50' ASSIGNING FIELD-SYMBOL(<fs_fc_anln1>).
          IF <fs_fc_anln1> IS ASSIGNED.
            wl_fieldcat = <fs_fc_anln1>.
            ADD 1 TO vl_colpos.
            wl_fieldcat-col_pos = vl_colpos.
            APPEND wl_fieldcat TO rt_fieldcat.
          ENDIF.

        WHEN 'ORD41'.
          READ TABLE tl_fc_t087t WITH KEY fieldname = 'ORDTX' ASSIGNING FIELD-SYMBOL(<fs_fc_t087t>).
          IF <fs_fc_t087t> IS ASSIGNED.
            wl_fieldcat = <fs_fc_t087t>.
            ADD 1 TO vl_colpos.
            wl_fieldcat-col_pos = vl_colpos.
            wl_fieldcat-dd_outlen = wl_fieldcat-intlen = 10.
            wl_fieldcat-tooltip = 'DescriÃ§Ã£o SituaÃ§Ã£o FÃ­sica'.
            wl_fieldcat-scrtext_l = 'Desc. Sit. FÃ­s.'.
            wl_fieldcat-scrtext_m = 'Desc. SituaÃ§Ã£o FÃ­sica'.
            wl_fieldcat-scrtext_s = 'DescriÃ§Ã£o SituaÃ§Ã£o FÃ­sica'.
            APPEND wl_fieldcat TO rt_fieldcat.
          ENDIF.

        WHEN 'TRANSTP'.
          CLEAR wl_fieldcat.
          ADD 1 TO vl_colpos.

          wl_fieldcat-col_pos = vl_colpos.
          wl_fieldcat-fieldname = 'DCR_TRANSTP'.
          wl_fieldcat-domname = 'ZDAA_STSOL_DESC'.
          wl_fieldcat-ref_table = space.
          wl_fieldcat-dd_outlen = wl_fieldcat-intlen = 15.
          wl_fieldcat-tooltip = 'Tipo TransferÃªncia'.
          wl_fieldcat-scrtext_l = 'Tipo Tranf.'.
          wl_fieldcat-scrtext_m = 'Tipo Tranf.'.
          wl_fieldcat-scrtext_s = 'Tipo TransferÃªncia'.
          wl_fieldcat-lowercase = abap_true.
          APPEND wl_fieldcat TO rt_fieldcat.
      ENDCASE.
    ENDLOOP.

    FREE tl_fieldcat.

**********************************************************************
*   " InclusÃ£o do botÃ£o na linha do ALV
**********************************************************************
    ADD 1 TO vl_colpos.
    wl_fieldcat-fieldname = 'TXT_ITM'.
    wl_fieldcat-col_pos = vl_colpos.
    wl_fieldcat-domname = 'ICON'.
    wl_fieldcat-ref_table = space.
    wl_fieldcat-dd_outlen = wl_fieldcat-intlen = 5.
    wl_fieldcat-style = cl_gui_alv_grid=>mc_style_button.
    wl_fieldcat-tooltip = 'Texto descritivo do Item'.
    wl_fieldcat-scrtext_l = 'Texto descritivo do Item'.
    wl_fieldcat-scrtext_m = 'Texto descritivo do Item'.
    wl_fieldcat-scrtext_s = 'TxtItem'.
    APPEND wl_fieldcat TO rt_fieldcat.

    ADD 1 TO vl_colpos.
    wl_fieldcat-fieldname = 'TXT_SOL'.
    wl_fieldcat-col_pos = vl_colpos.
    wl_fieldcat-domname = 'ICON'.
    wl_fieldcat-ref_table = space.
    wl_fieldcat-dd_outlen = wl_fieldcat-intlen = 5.
    wl_fieldcat-style = cl_gui_alv_grid=>mc_style_button.
    wl_fieldcat-tooltip = 'Texto descritivo da SolicitaÃ§Ã£o'.
    wl_fieldcat-scrtext_l = 'Texto descritivo da SolicitaÃ§Ã£o'.
    wl_fieldcat-scrtext_m = 'Texto descritivo da SolicitaÃ§Ã£o'.
    wl_fieldcat-scrtext_s = 'TxtSolic'.
    APPEND wl_fieldcat TO rt_fieldcat.

    ADD 1 TO vl_colpos.
    wl_fieldcat-fieldname = 'TXT_ITM_ID'.
    wl_fieldcat-col_pos = vl_colpos.
    wl_fieldcat-domname = 'NUM06'.
    wl_fieldcat-ref_table = space.
    wl_fieldcat-dd_outlen = wl_fieldcat-intlen = 5.
    wl_fieldcat-no_out = abap_true.
    APPEND wl_fieldcat TO rt_fieldcat.
*    DATA:
*      lt_dropdown    TYPE lvc_t_drop,
*      ls_dropdown    TYPE lvc_s_drop,
*      tl_dd07v_tab_a TYPE STANDARD TABLE OF dd07v,
*      tl_dd07v_tab_n TYPE STANDARD TABLE OF dd07v.
*
*    CALL FUNCTION 'DD_DOMA_GET'
*      EXPORTING
*        domain_name   = 'ZDAA_STS_SOL_TRANSF'
*      TABLES
*        dd07v_tab_a   = tl_dd07v_tab_a
*        dd07v_tab_n   = tl_dd07v_tab_n
*      EXCEPTIONS
*        illegal_value = 1
*        op_failure    = 2
*        OTHERS        = 3.
*
*    ls_dropdown-handle = '1'.
*    LOOP AT tl_dd07v_tab_a INTO DATA(wl_value) .
*      ls_dropdown-value = wl_value-ddtext.
*      APPEND ls_dropdown TO lt_dropdown.
*    ENDLOOP.
*
*    CALL FUNCTION 'DD_DOMA_GET'
*      EXPORTING
*        domain_name   = 'ZDAA_STS_ITM_SOL_TRANSF'
*      TABLES
*        dd07v_tab_a   = tl_dd07v_tab_a
*        dd07v_tab_n   = tl_dd07v_tab_n
*      EXCEPTIONS
*        illegal_value = 1
*        op_failure    = 2
*        OTHERS        = 3.
*
*    ls_dropdown-handle = '2'.
*    LOOP AT tl_dd07v_tab_a INTO wl_value .
*      ls_dropdown-value = wl_value-ddtext.
*      APPEND ls_dropdown TO lt_dropdown.
*    ENDLOOP.
*
*    me->og_alv_oo->set_drop_down_table(
*      it_drop_down = lt_dropdown ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->MONTAR_FIELDCAT_ALV_ACEITE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RT_FIELDCAT                    TYPE        LVC_T_FCAT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD montar_fieldcat_alv_aceite.
    DATA wl_fieldcat LIKE LINE OF rt_fieldcat.
    DATA(tl_fieldcat) = me->buscar_informacoes_estr( iv_estrutura = 'ZTAA_001' ).
    LOOP AT tl_fieldcat ASSIGNING FIELD-SYMBOL(<fs_fieldcat>).
      CASE <fs_fieldcat>-fieldname.
        WHEN 'SOLICITACAO'.
          <fs_fieldcat>-col_pos = '1'.
          APPEND <fs_fieldcat> TO rt_fieldcat.
        WHEN 'ANLN1'.
          <fs_fieldcat>-col_pos = '2'.
          APPEND <fs_fieldcat> TO rt_fieldcat.
        WHEN 'ANLN2'.
          <fs_fieldcat>-col_pos = '3'.
          APPEND <fs_fieldcat> TO rt_fieldcat.
        WHEN 'BUKRS'.
          <fs_fieldcat>-col_pos = '4'.
          APPEND <fs_fieldcat> TO rt_fieldcat.
        WHEN 'PERNR'.
*          IF sy-cprog EQ 'ZAA_007'. " Apenas no programa de aprovaÃ§Ã£o Fiscal
          <fs_fieldcat>-edit = abap_true.
*          ENDIF.
          <fs_fieldcat>-col_pos = '5'.
          APPEND <fs_fieldcat> TO rt_fieldcat.
        WHEN 'TRANSTP'.
          <fs_fieldcat>-col_pos = '6'.
          APPEND <fs_fieldcat> TO rt_fieldcat.
        WHEN 'KOSTLD'.
          <fs_fieldcat>-col_pos = '7'.
          APPEND <fs_fieldcat> TO rt_fieldcat.
        WHEN 'STORTD'.
*          IF sy-cprog EQ 'ZAA_007'. " Apenas no programa de aprovaÃ§Ã£o Fiscal
          <fs_fieldcat>-edit = abap_true.
*          ENDIF.
          <fs_fieldcat>-col_pos = '8'.
          APPEND <fs_fieldcat> TO rt_fieldcat.
        WHEN 'CRDATE'.
          <fs_fieldcat>-col_pos = '9'.
          APPEND <fs_fieldcat> TO rt_fieldcat.
        WHEN 'KOSTL'.
          <fs_fieldcat>-col_pos = '10'.
          APPEND <fs_fieldcat> TO rt_fieldcat.
        WHEN 'STORT'.
          <fs_fieldcat>-col_pos = '11'.
          APPEND <fs_fieldcat> TO rt_fieldcat.
        WHEN 'STSITM'.
*          IF sy-cprog EQ 'ZAA_007'. " Apenas no programa de aprovaÃ§Ã£o Fiscal
*            wl_fieldcat-reptext     = <fs_fieldcat>-reptext.
*            wl_fieldcat-scrtext_s   = <fs_fieldcat>-scrtext_s.
*            wl_fieldcat-scrtext_m   = <fs_fieldcat>-scrtext_m.
*            wl_fieldcat-scrtext_l   = <fs_fieldcat>-scrtext_l.
*            wl_fieldcat-fieldname   = 'STSITM'.
*            wl_fieldcat-coltext     = <fs_fieldcat>-coltext.
*            wl_fieldcat-col_pos     = '12'.
*            wl_fieldcat-outputlen   = wl_fieldcat-intlen = 6.
*            wl_fieldcat-datatype    = 'CHAR'.
*            wl_fieldcat-f4availabl  = abap_true.
*            wl_fieldcat-edit        = abap_true.
*
*            APPEND wl_fieldcat TO rt_fieldcat.
*          ENDIF.
      ENDCASE.
    ENDLOOP.

*    FREE tl_fieldcat.
*    tl_fieldcat = me->buscar_informacoes_estr( iv_estrutura = 'ANLA' ).
*    READ TABLE tl_fieldcat WITH KEY fieldname = 'TXT50' ASSIGNING <fs_fieldcat>.
*    IF <fs_fieldcat> IS ASSIGNED.
*      <fs_fieldcat>-col_pos = '4'.
*      <fs_fieldcat>-edit = abap_false.
**      <fs_fieldcat>-auto_value = abap_true.
**      <fs_fieldcat>-valexi = abap_true.
*      APPEND <fs_fieldcat> TO rt_fieldcat.
*    ENDIF.

**********************************************************************
*   " InclusÃ£o do botÃ£o na linha do ALV
**********************************************************************

    wl_fieldcat-fieldname = 'TXT_ITM'.
    wl_fieldcat-col_pos = '30'.
    wl_fieldcat-domname = 'ICON'.
    wl_fieldcat-ref_table = space.
    wl_fieldcat-dd_outlen = <fs_fieldcat>-intlen = 5.
    wl_fieldcat-style = cl_gui_alv_grid=>mc_style_button.
    wl_fieldcat-tooltip = 'Texto descritivo do Item'.
    wl_fieldcat-scrtext_l = 'Texto descritivo do Item'.
    wl_fieldcat-scrtext_m = 'Texto descritivo do Item'.
    wl_fieldcat-scrtext_s = 'TxtItem'.
    APPEND wl_fieldcat TO rt_fieldcat.

    CLEAR wl_fieldcat.
    wl_fieldcat-fieldname = 'TXT_SOL'.
    wl_fieldcat-col_pos = '30'.
    wl_fieldcat-domname = 'ICON'.
    wl_fieldcat-ref_table = space.
    wl_fieldcat-dd_outlen = <fs_fieldcat>-intlen = 5.
    wl_fieldcat-style = cl_gui_alv_grid=>mc_style_button.
    wl_fieldcat-tooltip = 'Texto descritivo da SolicitaÃ§Ã£o'.
    wl_fieldcat-scrtext_l = 'Texto descritivo da SolicitaÃ§Ã£o'.
    wl_fieldcat-scrtext_m = 'Texto descritivo da SolicitaÃ§Ã£o'.
    wl_fieldcat-scrtext_s = 'TxtSolic'.
    APPEND wl_fieldcat TO rt_fieldcat.

**********************************************************************
*   " Insere o drop down key.
**********************************************************************

    IF sy-cprog EQ 'ZAA_007'. " Apenas no programa de aprovaÃ§Ã£o Fiscal
*    " List-box nÃ£o funciona do WEBGUI.
      CLEAR wl_fieldcat.
      wl_fieldcat-fieldname = 'STSITM_DDK'.
      wl_fieldcat-col_pos = '12'.
      wl_fieldcat-domname = 'ZDAA_STSOL_DESC'.
      wl_fieldcat-ref_table = space.
      wl_fieldcat-dd_outlen = <fs_fieldcat>-intlen = 15.
      wl_fieldcat-tooltip = 'Status do Item'.
      wl_fieldcat-scrtext_l = 'Status do Item'.
      wl_fieldcat-scrtext_m = 'Status do Item'.
      wl_fieldcat-scrtext_s = 'Status'.
      wl_fieldcat-col_pos = '12'.
*      wl_fieldcat-style = cl_gui_alv_grid=>mc_style_button.
*      wl_fieldcat-drdn_hndl = '1'.
*      wl_fieldcat-drdn_alias = abap_true.
      wl_fieldcat-f4availabl = abap_true.
      wl_fieldcat-lowercase = abap_true.
      wl_fieldcat-edit = abap_true.
      APPEND wl_fieldcat TO rt_fieldcat.
*
      me->criar_dropdown_statusitem( ).
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->MONTAR_IMOBILIZADO_TRANSF
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ANLN1                       TYPE        ZTAA_001-ANLN1
* | [--->] IV_ANLN2                       TYPE        ZTAA_001-ANLN2
* | [<---] ES_LISTA_IMOB                  TYPE        TY_LISTA_IMOB
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD montar_imobilizado_transf.
    me->buscar_dados_imobilizado(
      EXPORTING
        iv_anln1 = iv_anln1 " NÂº principal do imobilizado
        iv_anln2 = iv_anln2 " SubnÂº do imobilizado
      IMPORTING
        es_anla  = DATA(sl_join)
    ).

    CLEAR es_lista_imob.
    es_lista_imob-mandt   = sy-mandt.
    es_lista_imob-bukrs   = me->vg_bukrs.

    READ TABLE me->rg_werks_o INTO DATA(wl_werks) INDEX 1.
    es_lista_imob-werks   = wl_werks-low.
    es_lista_imob-gjahr   = sy-datum(4).
    es_lista_imob-solicitacao = me->vg_solic.
    es_lista_imob-item    = me->vg_item_base.
    es_lista_imob-crdate  = sy-datum.
    es_lista_imob-stshdr  = '1'. " Em analise fiscal
    es_lista_imob-stsitm  = '1'. " Pendente
    es_lista_imob-kostl   = sl_join-kostl.
    es_lista_imob-stort   = sl_join-stort.

*   " Recupera as informaÃ§Ãµes do responsÃ¡vel pela criaÃ§Ã£o do objeto.
    es_lista_imob-solori = me->buscar_pernr_uname( sy-uname ).

    es_lista_imob-transtp = me->vg_transtp.
*    Es_LISTA_IMOB-BZDAT
    es_lista_imob-werksd = me->vg_werks_d.

*    READ TABLE me->rg_kostl_d INTO DATA(wl_kostl_d) INDEX 1.
    es_lista_imob-kostld = me->vg_kostl_d.
    es_lista_imob-stortd = me->vg_stort_d.
    es_lista_imob-pernr = me->vg_resp_rec.
    es_lista_imob-anln1 = sl_join-anln1.
    es_lista_imob-anln2 = sl_join-anln2.
    es_lista_imob-invnr = sl_join-invnr.
    es_lista_imob-ord41 = sl_join-ord41.
    es_lista_imob-txt50 = sl_join-txt50.

    DATA:
      sl_anlcv TYPE anlcv,
      vl_gjahr TYPE  gjahr.

    vl_gjahr = sy-datum(4).

    CALL FUNCTION 'ZMFAA_CALC_VLR_CONT_ATIVO_IMOB'
      EXPORTING
        iv_anln1        = es_lista_imob-anln1
        iv_anln2        = es_lista_imob-anln2
        iv_bukrs        = es_lista_imob-bukrs
        iv_gjahr        = vl_gjahr
        iv_afabe        = '01'
      IMPORTING
        ev_anlcv        = sl_anlcv
      EXCEPTIONS
        not_found       = 1
        err_in_depr_rec = 2
        OTHERS          = 4.

    IF sy-subrc <> 0.
      DATA sl_msg TYPE bapiret2.
      sl_msg-type   = sy-msgty.
      sl_msg-id     = sy-msgid.
      sl_msg-number = sy-msgno.
      sl_msg-message_v1 = sy-msgv1.
      sl_msg-message_v2 = sy-msgv2.
      sl_msg-message_v3 = sy-msgv3.
      sl_msg-message_v4 = sy-msgv4.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.
    ENDIF.

    es_lista_imob-vr_contabil = sl_anlcv-lfd_bchwrt.
    es_lista_imob-txt_itm = icon_create_text.
    es_lista_imob-txt_sol = icon_create_text.
    es_lista_imob-anlkl = sl_join-anlkl.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->RECUSAR_TRANSFERENCIA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_IMOBILIZADOS                TYPE        TT_LISTA_IMOB
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD recusar_transferencia.
    DATA:
      sl_msg          TYPE bapiret2,
      tl_imob_recusar TYPE me->tt_lista_imob.

    tl_imob_recusar[] = it_imobilizados[].

    DATA tl_sol_email TYPE STANDARD TABLE OF ztaa_001.
    tl_sol_email[] = CORRESPONDING #( tl_imob_recusar[] ).

    IF tl_imob_recusar[] IS NOT INITIAL.
**********************************************************************
*     " Executa o evento em modo de teste.
**********************************************************************
      me->executar_evento_591408( iv_check = abap_true it_imobilizados = tl_imob_recusar ).

**********************************************************************
*     " Realiza o envio do e-mail para o responsÃ¡vel pela abertura da solicitaÃ§Ã£o.
**********************************************************************
      SORT tl_sol_email BY solicitacao.
      DELETE ADJACENT DUPLICATES FROM tl_sol_email COMPARING solicitacao.
      LOOP AT tl_sol_email ASSIGNING FIELD-SYMBOL(<fs_sol_email>).
        me->enviar_email_recusa( is_imobilizado = <fs_sol_email> ).
      ENDLOOP.

      LOOP AT tl_imob_recusar ASSIGNING FIELD-SYMBOL(<fs_imob_recusar>).
        UPDATE ztaa_001
          SET
*            stshdr = '4' " Cancelado
            stsitm = '3' " Recusada
        WHERE bukrs          = <fs_imob_recusar>-bukrs
          AND werks          = <fs_imob_recusar>-werks
          AND gjahr          = <fs_imob_recusar>-gjahr
          AND solicitacao    = <fs_imob_recusar>-solicitacao
          AND item           = <fs_imob_recusar>-item       .
      ENDLOOP.

**************************************************************************************
*     " Realiza o ajuste do status do cabeÃ§alho, de acordo com as modificaÃ§Ãµes.
**************************************************************************************
      me->ajustar_status_header( it_imobilizados = tl_imob_recusar iv_status = '4' ).
      me->ajustar_status_header( it_imobilizados = tl_imob_recusar iv_status = '3' ).

**********************************************************************
*     " Executa o evento.
**********************************************************************
      me->executar_evento_591408( iv_check = abap_false it_imobilizados = tl_imob_recusar ).

    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->REFRESH_ALV_OO
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD refresh_alv_oo.
    me->og_alv_oo->refresh_table_display( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->SERACH_HELP_ANLN1
* +-------------------------------------------------------------------------------------------------+
* | [<-->] ER_EVENT_DATA                  TYPE REF TO CL_ALV_EVENT_DATA
* | [<-->] ES_ROW_NO                      TYPE        LVC_S_ROID
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD serach_help_anln1.
    DATA:
      sl_dynp_help_info TYPE help_info,
      tl_record_tab     TYPE STANDARD TABLE OF ddshretval,
      tl_dynpselect     TYPE STANDARD TABLE OF dselc,
      ls_modi           TYPE lvc_s_modi,
      wl_lista_imob     LIKE LINE OF me->tg_lista_imob.

    FIELD-SYMBOLS:
      <itab>          TYPE lvc_t_modi,
      <fs_lista_imob> LIKE LINE OF me->tg_lista_imob.

    sl_dynp_help_info = VALUE #(
      tabname = 'ANLAV'
      fieldname = 'ANLN1' ).

    tl_dynpselect = VALUE #(
      ( fldname   = 'MANDT' dyfldname = 'ANLAV-MANDT' )
      ( fldname   = 'BUKRS' dyfldname = 'ANLAV-BUKRS ' )
      ( fldname   = 'ANLN1' dyfldname = 'ANLAV-ANLN1 ' )
    ).

    CALL FUNCTION 'DD_SHLP_SELSCREEN_MULTI_SELECT'
      EXPORTING
        tabname        = 'ANLAV'
        fieldname      = 'ANLN1'
        dynp_help_info = sl_dynp_help_info
        titel          = 'NÂº imobilizado'
      TABLES
        record_tab     = tl_record_tab
        dynpselect     = tl_dynpselect.

    IF tl_record_tab[] IS NOT INITIAL.
      ASSIGN er_event_data->m_data->* TO <itab>.

      SORT tl_record_tab BY fieldval.
      DELETE ADJACENT DUPLICATES FROM tl_record_tab COMPARING fieldval.

      READ TABLE tl_record_tab INDEX 1 INTO DATA(wl_record_tab).
      ls_modi-row_id   = es_row_no-row_id.
      ls_modi-fieldname = 'ANLN1'.
      ls_modi-value     = wl_record_tab-fieldval.
      APPEND ls_modi TO <itab>.

      ls_modi-row_id   = es_row_no-row_id.
      ls_modi-fieldname = 'ANLN2'.
      ls_modi-value     = '0000'.
      APPEND ls_modi TO <itab>.

      READ TABLE me->rg_werks_o INTO DATA(wl_werks) INDEX 1.
      DATA vl_linha TYPE sy-tabix.
      LOOP AT tl_record_tab INTO wl_record_tab FROM 2.
        CLEAR wl_lista_imob.
        wl_lista_imob-anln1 = wl_record_tab-fieldval.
        wl_lista_imob-anln2 = '0000'.
        wl_lista_imob-bukrs = me->vg_bukrs.
        wl_lista_imob-werks = wl_werks-low.
        wl_lista_imob-txt_itm = icon_create_text.

        APPEND wl_lista_imob TO me->tg_lista_imob.
        vl_linha = sy-tabix.
        ls_modi-row_id   = vl_linha.
        ls_modi-fieldname = 'ANLN1'.
        ls_modi-value     = wl_record_tab-fieldval.
        APPEND ls_modi TO <itab>.

        ls_modi-row_id   = vl_linha.
        ls_modi-fieldname = 'ANLN2'.
        ls_modi-value     = '0000'.
        APPEND ls_modi TO <itab>.

      ENDLOOP.

      me->og_alv_oo->refresh_table_display(
*        EXPORTING
*          is_stable      =                  " With Stable Rows/Columns
*          i_soft_refresh =                  " Without Sort, Filter, etc.
*        EXCEPTIONS
*          finished       = 1                " Display was Ended (by Export)
*          others         = 2
      ).

    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->SERACH_HELP_ITM_APROVA
* +-------------------------------------------------------------------------------------------------+
* | [<-->] ER_EVENT_DATA                  TYPE REF TO CL_ALV_EVENT_DATA
* | [<-->] ES_ROW_NO                      TYPE        LVC_S_ROID
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD serach_help_itm_aprova.
    TYPES: BEGIN OF ty_help,
             status TYPE zeaa_stsol_desc,
           END OF ty_help.
    DATA:
      tl_data TYPE STANDARD TABLE OF ty_help,
      wl_data LIKE LINE OF tl_data,
      ls_modi TYPE lvc_s_modi.

    FIELD-SYMBOLS: <itab> TYPE lvc_t_modi.

    IF tl_data[] IS INITIAL.
      me->buscar_texto_dominio(
        EXPORTING
          iv_domain_name = 'ZDAA_STS_ITM_SOL_TRANSF' iv_value = '5'
        IMPORTING
          ev_text = wl_data-status ).

      APPEND wl_data TO tl_data.

      CLEAR wl_data.
      me->buscar_texto_dominio(
        EXPORTING
          iv_domain_name = 'ZDAA_STS_ITM_SOL_TRANSF' iv_value = '3'
        IMPORTING
          ev_text = wl_data-status ).

      APPEND wl_data TO tl_data.
    ENDIF.
*
*Call the function module to display the custom F4 values
    DATA tl_retorno TYPE TABLE OF ddshretval.
    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING
        retfield        = 'STSITM_DDK'
        window_title    = 'List of State entries'(002)
        value_org       = 'S'
      TABLES
        value_tab       = tl_data[]
        return_tab      = tl_retorno[]
      EXCEPTIONS
        parameter_error = 1
        no_values_found = 2
        OTHERS          = 3.

    IF sy-subrc EQ 0.
      READ TABLE tl_retorno INTO DATA(wl_sel) INDEX 1.
      ASSIGN er_event_data->m_data->* TO <itab>.

      READ TABLE me->tg_lista_imob INDEX es_row_no-row_id INTO DATA(wl_lista_imob).
      ls_modi-row_id   = es_row_no-row_id.
      ls_modi-fieldname = 'STSITM_DDK'.
      ls_modi-value     = wl_sel-fieldval.

      APPEND ls_modi TO <itab>.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCLAA_TRANSF_IMOBILIZADO->SET_DADOS_DESTINO
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_WERKS                       TYPE        ZTAA_001-WERKSD
* | [--->] IV_KOSTL                       TYPE        ZTAA_001-KOSTLD
* | [--->] IV_STORT                       TYPE        ZTAA_001-STORTD(optional)
* | [--->] IV_TRANSTP                     TYPE        ZTAA_001-TRANSTP(optional)
* | [--->] IV_RESP_REC                    TYPE        ZTAA_001-PERNR(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_dados_destino.
    me->vg_werks_d = iv_werks.
    me->vg_kostl_d = iv_kostl.
    me->vg_stort_d = iv_stort.
    me->vg_transtp = iv_transtp.
    me->vg_resp_rec = iv_resp_rec.

*    me->rg_kostl_d = VALUE tr_kostl( ( sign = 'I' option = 'EQ' low = iv_kostl ) ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->VERIFICAR_ACESSO_CENTRO
* +-------------------------------------------------------------------------------------------------+
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD verificar_acesso_centro.
    DATA sl_msg TYPE bapiret2.
    SELECT SINGLE verak, verak_user
      INTO @DATA(sl_csks)
      FROM csks
      WHERE kostl IN @me->rg_kostl_o
        AND datab LE @sy-datum
        AND datbi GT @sy-datum.

    IF NOT ( sl_csks-verak EQ sy-uname OR sl_csks-verak_user EQ sy-uname ).
      READ TABLE me->rg_kostl_o INTO DATA(wl_kostl) INDEX 1.
      sl_msg-type = 'E'.
      sl_msg-id = 'ZAA'.
      sl_msg-number = 018. " UsuÃ¡rio &1 nÃ£o Ã© responsÃ¡vel pelo Centro de Custos &2
      sl_msg-message_v1 = sy-uname.
      sl_msg-message_v2 = wl_kostl-low.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->VERIFICAR_DADOS
* +-------------------------------------------------------------------------------------------------+
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD verificar_dados.
    DATA:
      sl_msg     TYPE bapiret2,
      vl_domname TYPE dd07l-domname.

    READ TABLE me->rg_werks_o INTO DATA(wl_werks) INDEX 1.

    IF me->vg_transtp IS INITIAL.
      sl_msg-type = 'E'.
      sl_msg-id = 'ZAA'.
      sl_msg-number = 006. " O campo &1 Ã© obrigatÃ³rio.
      sl_msg-message_v1 = 'Tipo de tranferÃªncia'.
      sl_msg-field = 'SG_ZTAA_001-TRANSTP'.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.
    ELSE.
      me->buscar_texto_dominio(
        EXPORTING
          iv_domain_name = 'ZDAA_TIPO_TRANSF'
          iv_value       = me->vg_transtp
        IMPORTING
          ev_text = vl_domname
      ).

      IF vl_domname IS INITIAL.
        sl_msg-type = 'E'.
        sl_msg-id = 'ZAA'.
        sl_msg-number = 007. " O valor de &1 informado nÃ£o Ã© vÃ¡lido.
        sl_msg-message_v1 = 'Tipo de tranferÃªncia'.
        sl_msg-field = 'SG_ZTAA_001-TRANSTP'.

        RAISE EXCEPTION TYPE cx_idm_error
          EXPORTING
            message = sl_msg.
      ENDIF.
    ENDIF.

    IF me->vg_werks_d IS INITIAL.
      sl_msg-type = 'E'.
      sl_msg-id = 'ZAA'.
      sl_msg-number = 006. " O campo &1 Ã© obrigatÃ³rio.
      sl_msg-message_v1 = 'Centro de Destino'.
      sl_msg-field = 'SG_ZTAA_001-WERKSD'.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.

    ELSEIF me->get_desc_werks( iv_werks = me->vg_werks_d  ) IS INITIAL.
      sl_msg-type = 'E'.
      sl_msg-id = 'ZAA'.
      sl_msg-number = 007. " O valor de &1 informado nÃ£o Ã© vÃ¡lido.
      sl_msg-message_v1 = 'Centro de Destino'.
      sl_msg-field = 'SG_ZTAA_001-WERKSD'.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.
    ENDIF.

*************************************************************************************
*	  " Verifica se o Centro de Origem Ã© igual ao de Destino
*************************************************************************************
    IF me->vg_transtp EQ '01' AND me->vg_werks_d EQ wl_werks-low.
      IF 1 = 2. MESSAGE s029(zaa). ENDIF. " Centro de origem e destino sÃ£o iguais. Selecione "TransferÃªncia Interna".
      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = VALUE #( type       = 'E'
                             id         = 'ZAA'
                             number     = 029
                             message_v1 = 'Centro de Destino'
                             field      = 'SG_ZTAA_001-TRANSTP' ).
    ENDIF.

*    READ TABLE me->rg_kostl_d INTO DATA(wl_kostl_d) INDEX 1.
    IF me->vg_kostl_d IS INITIAL.
      sl_msg-type = 'E'.
      sl_msg-id = 'ZAA'.
      sl_msg-number = 006. " O campo &1 Ã© obrigatÃ³rio.
      sl_msg-message_v1 = 'Centro de Custo de Destino'.
      sl_msg-field = 'SG_ZTAA_001-KOSTLD'.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.
    ELSEIF me->get_desc_kostl( iv_kostl = me->vg_kostl_d ) IS INITIAL.
      sl_msg-type = 'E'.
      sl_msg-id = 'ZAA'.
      sl_msg-number = 007. " O valor de &1 informado nÃ£o Ã© vÃ¡lido.
      sl_msg-message_v1 = 'Centro de Custo de Destino'.
      sl_msg-field = 'SG_ZTAA_001-KOSTLD'.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.
    ENDIF.

    IF ( me->vg_stort_d IS NOT INITIAL ) AND ( me->get_desc_stort( iv_stort = me->vg_stort_d iv_werks = me->vg_werks_d ) IS INITIAL ).
      sl_msg-type = 'E'.
      sl_msg-id = 'ZAA'.
      sl_msg-number = 007. " O valor de &1 informado nÃ£o Ã© vÃ¡lido.
      sl_msg-message_v1 = 'LocalizaÃ§Ã£o'.
      sl_msg-field = 'SG_ZTAA_001-STORTD'.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.
    ENDIF.

    IF ( me->vg_resp_rec IS NOT INITIAL ) AND ( me->get_desc_pernr( iv_pernr = me->vg_resp_rec ) IS INITIAL ).
      sl_msg-type = 'E'.
      sl_msg-id = 'ZAA'.
      sl_msg-number = 007. " O valor de &1 informado nÃ£o Ã© vÃ¡lido.
      sl_msg-message_v1 = 'NÂº Pessoal'.
      sl_msg-field = 'SG_ZTAA_001-PERNR'.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.
    ENDIF.

    IF me->tg_lista_imob[] IS INITIAL.
      sl_msg-type = 'E'.
      sl_msg-id = 'ZAA'.
      sl_msg-number = 010. " Nenhum imbolizado foi informado para transferÃªncia.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.
    ELSE.

*      me->buscar_dados_imobilizado(
*        EXPORTING
*          it_lista_imob = me->tg_lista_imob
*        IMPORTING
*          et_anla       = DATA(tl_anla)
*      ).

      DATA tl_anla TYPE tt_anla.
      SELECT anla~anln1 anla~anln2 anla~anlkl anla~invnr anla~ord41 anlz~bukrs anlz~kostl anlz~werks anlz~stort anla~txt50
        deakt aktiv
        INTO TABLE tl_anla
        FROM anla
          INNER JOIN anlz
            ON anlz~bukrs EQ anla~bukrs
            AND anlz~anln1 EQ anla~anln1
            AND anlz~anln2 EQ anla~anln2
        FOR ALL ENTRIES IN me->tg_lista_imob
        WHERE anla~anln1 EQ me->tg_lista_imob-anln1
          AND anla~anln2 EQ me->tg_lista_imob-anln2
          AND anlz~bdatu EQ '99991231'.
*      AND anla~deakt EQ '00000000'
*      AND anla~aktiv NE '00000000'

      SORT tl_anla BY anln1 anln2.
      LOOP AT me->tg_lista_imob ASSIGNING FIELD-SYMBOL(<fs_tg_lista_imob>).
        READ TABLE tl_anla WITH KEY anln1 = <fs_tg_lista_imob>-anln1
                                    anln2 = <fs_tg_lista_imob>-anln2 ASSIGNING FIELD-SYMBOL(<fs_anla>).
        IF sy-subrc NE 0.
          RAISE EXCEPTION TYPE cx_idm_error
            EXPORTING
              message = VALUE #(
                type = 'E'
                id = 'ZAA'
                number = 027 " O imobilizado &1/&2 nÃ£o foi encontrado.
                message_v1 = <fs_tg_lista_imob>-anln1
                message_v2 = <fs_tg_lista_imob>-anln2 ).
        ENDIF.

        IF <fs_anla>-deakt NE '00000000'.
          RAISE EXCEPTION TYPE cx_idm_error
            EXPORTING
              message = VALUE #(
                type = 'E'
                id = 'ZAA'
                number = 025 " O imobilizado &1 encontra-se baixado.
                message_v1 = <fs_tg_lista_imob>-anln1
                message_v2 = <fs_tg_lista_imob>-anln2 ).
        ENDIF.

        IF <fs_anla>-aktiv EQ '00000000'.
          RAISE EXCEPTION TYPE cx_idm_error
            EXPORTING
              message = VALUE #(
                type = 'E'
                id = 'ZAA'
                number = 026 " O imobilizado &1 nÃ£o foi valorizado/incorporado.
                message_v1 = <fs_tg_lista_imob>-anln1
                message_v2 = <fs_tg_lista_imob>-anln2 ).
        ENDIF.

        IF <fs_anla> IS ASSIGNED AND <fs_anla>-werks NE wl_werks-low.
          sl_msg-type = 'E'.
          sl_msg-id = 'ZAA'.
          sl_msg-number = 016. " O imobilizado &1/&2 nÃ£o pertence ao centro &3.
          sl_msg-message_v1 = <fs_tg_lista_imob>-anln1.
          sl_msg-message_v2 = <fs_tg_lista_imob>-anln2.
          sl_msg-message_v3 = wl_werks-low.

          RAISE EXCEPTION TYPE cx_idm_error
            EXPORTING
              message = sl_msg.
        ENDIF.
      ENDLOOP.

      SELECT solicitacao, stshdr, anln1, anln2 UP TO 1 ROWS
        INTO @DATA(sl_ztaa_001)
        FROM ztaa_001
        FOR ALL ENTRIES IN @tl_anla
        WHERE bukrs EQ @tl_anla-bukrs
          AND anln1 EQ @tl_anla-anln1
          AND anln2 EQ @tl_anla-anln2
          AND stshdr NOT IN ( '3', '4' ). " ConcluÃ­do ou Cancelado
*          AND stshdr NE '3'. " ConcluÃ­do
      ENDSELECT.

      IF sl_ztaa_001 IS NOT INITIAL.
        me->buscar_texto_dominio(
          EXPORTING
            iv_domain_name = 'ZDAA_STS_SOL_TRANSF'
            iv_value       = sl_ztaa_001-stshdr
          IMPORTING
            ev_text = vl_domname
        ).

        sl_msg-type = 'E'.
        sl_msg-id = 'ZAA'.
        sl_msg-number = 020. " O imobilizado &1/&2 jÃ¡ atribuÃ­do na solicitaÃ§Ã£o &3 nÃ£o concluÃ­da.
        sl_msg-message_v1 = sl_ztaa_001-anln1.
        sl_msg-message_v2 = sl_ztaa_001-anln2.
        sl_msg-message_v3 = sl_ztaa_001-solicitacao.
        sl_msg-message_v4 = vl_domname.

        RAISE EXCEPTION TYPE cx_idm_error
          EXPORTING
            message = sl_msg.
      ENDIF.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCLAA_TRANSF_IMOBILIZADO->VISUALIZAR_TEXTO_LINHA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_LINHA                       TYPE        I
* | [--->] IV_COL                         TYPE        LVC_FNAME
* | [!CX!] CX_IDM_ERROR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD visualizar_texto_linha.
    DATA:
      tl_lines       TYPE dms_tab_tdline,
      wl_textos_imob LIKE LINE OF me->tg_textos_imob,
      sl_msg         TYPE bapiret2.

    READ TABLE me->tg_lista_imob ASSIGNING FIELD-SYMBOL(<fs_lista_imob>) INDEX iv_linha.
    IF <fs_lista_imob> IS NOT ASSIGNED.
      RETURN.
    ENDIF.

*   " Lista o texto da solicitaÃ§Ã£o.
    IF iv_col EQ 'TXT_SOL'.
      tl_lines = VALUE #( FOR wl_textos IN me->tg_texto_sol WHERE ( solicitacao = <fs_lista_imob>-solicitacao ) ( wl_textos-texto ) ).

    ELSE.
*   " Lista o texto do item da solicitaÃ§Ã£o.
      FREE tl_lines.
      LOOP AT me->tg_textos_imob INTO wl_textos_imob WHERE bukrs         = <fs_lista_imob>-bukrs
                                                       AND werks         = <fs_lista_imob>-werks
                                                       AND gjahr         = <fs_lista_imob>-gjahr
                                                       AND solicitacao   = <fs_lista_imob>-solicitacao
                                                       AND item          = <fs_lista_imob>-item       .
        APPEND wl_textos_imob-texto TO tl_lines.
      ENDLOOP.
    ENDIF.

    IF tl_lines[] IS INITIAL.
      sl_msg-type = 'E'.
      sl_msg-id = 'ZAA'.
      sl_msg-number = 017. " O imobilizado &1/&2 nÃ£o possui texto.
      sl_msg-message_v1 = <fs_lista_imob>-anln1.
      sl_msg-message_v2 = <fs_lista_imob>-anln2.

      RAISE EXCEPTION TYPE cx_idm_error
        EXPORTING
          message = sl_msg.
    ENDIF.

    CALL FUNCTION 'ZMFAA_TEXT_EDIT'
      EXPORTING
        titel          = 'Texto descritivo'
        langu          = sy-langu
        iv_display     = abap_true
      TABLES
        textlines      = tl_lines
      EXCEPTIONS
        user_cancelled = 1
        OTHERS         = 2.
  ENDMETHOD.
ENDCLASS.
